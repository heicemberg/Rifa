// ============================================================================
// PREMIUM PURCHASE WIZARD - 5-STEP MODAL WITH SUPABASE INTEGRATION
// Ultra Premium UI/UX with Real-time Validation and Payment Animations
// Fixed: Minimum 2 tickets validation, smooth Framer Motion animations
// ============================================================================

'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence, LayoutGroup } from 'framer-motion';
import { 
  X, 
  ArrowLeft, 
  ArrowRight, 
  CheckCircle, 
  CreditCard, 
  Building2, 
  Smartphone,
  Users,
  MapPin,
  Phone,
  Mail,
  FileText,
  Upload,
  Copy,
  Check,
  Camera,
  Zap,
  TrendingUp,
  Gift,
  AlertCircle,
  AlertTriangle,
  Sparkles
} from 'lucide-react';
import { cn } from '../lib/utils';
import { formatPrice, formatTicketNumber } from '../lib/utils';
import { PAYMENT_METHODS, QUICK_SELECT_OPTIONS, MAIN_CARD_OPTIONS, MIN_TICKETS_PER_PURCHASE } from '../lib/constants';
import type { PaymentMethod as PaymentMethodType } from '../lib/types';
import { useMasterCounters } from '../hooks/useMasterCounters';
import { useLazyCryptoPrice } from '../hooks/useLazyCryptoPrice';
import { useCryptoConversion } from '../hooks/useCryptoConversion';
import { getPaymentMethods, validatePaymentConfig } from '../lib/config/payment-config';
import { useRaffleStore } from '../stores/raffle-store';
import { useOversellProtection } from '../hooks/useOversellProtection';
import { useReservationCleanup } from '../hooks/useReservationCleanup';

// ============================================================================
// INTERFACES AND TYPES
// ============================================================================

interface PurchaseWizardProps {
  isOpen: boolean;
  onClose: () => void;
  selectedTickets: number[];
  onConfirmPurchase: (customerData: CustomerData, paymentMethod: string) => Promise<void>;
  onQuickSelect: (count: number) => void;
  isProcessing: boolean;
}

interface CustomerData {
  name: string;
  email: string;
  phone: string;
  city: string;
  state: string;
  [key: string]: string; // Index signature for dynamic property access
}

interface ValidationErrors {
  [key: string]: string;
}

interface WizardStep {
  number: number;
  title: string;
  description: string;
  icon: React.ReactNode;
  color: string;
}

// ============================================================================
// OPTIMIZED COMPONENTS FOR MAXIMUM PERFORMANCE
// ============================================================================

interface OptimizedQuickSelectCardProps {
  option: { tickets: number; price: number; discount: number; popular?: boolean };
  onSelect: () => void;
  disabled?: boolean;
}

// ‚úÖ ULTRA-OPTIMIZED: High-performance card with mobile-first UX improvements
const OptimizedQuickSelectCard: React.FC<OptimizedQuickSelectCardProps> = React.memo(({
  option,
  onSelect,
  disabled = false
}) => {
  // ‚úÖ PERFORMANCE: Ultra-robust event handler with haptic feedback
  const handleClick = useCallback((e: React.MouseEvent | React.TouchEvent) => {
    e.preventDefault();
    e.stopPropagation();

    if (disabled) {
      console.log(`‚ö†Ô∏è CARD DISABLED: ${option.tickets} boletos`);
      return;
    }

    // Mobile haptic feedback
    if ('vibrate' in navigator) {
      navigator.vibrate(50);
    }

    console.log(`üéØ CARD CLICKED: ${option.tickets} boletos - EJECUTANDO onSelect`);

    try {
      onSelect();
      console.log(`‚úÖ onSelect ejecutado para ${option.tickets} boletos`);
    } catch (error) {
      console.error(`‚ùå Error ejecutando onSelect:`, error);
    }
  }, [onSelect, disabled, option.tickets]);

  // ‚úÖ PERFORMANCE: Pre-calculated styles with enhanced mobile interactions
  const isPopular = Boolean(option.popular);
  const baseStyles = useMemo(() => ({
    base: cn(
      'relative overflow-hidden rounded-2xl p-4 sm:p-5 text-center transition-all duration-200 ease-out',
      'focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/50',
      'z-10 select-none', // Prevent text selection on mobile
      disabled
        ? 'opacity-50 cursor-not-allowed'
        : 'cursor-pointer hover:scale-[1.02] active:scale-[0.98] touch-manipulation',
      isPopular
        ? 'bg-gradient-to-br from-amber-50 via-amber-100 to-orange-50 border-2 border-amber-300 shadow-lg shadow-amber-400/25 ring-1 ring-amber-200/30'
        : 'bg-gradient-to-br from-white via-slate-50 to-white border-2 border-slate-200 hover:border-blue-300 hover:bg-blue-50/60 hover:shadow-lg hover:shadow-blue-200/30'
    )
  }), [disabled, isPopular]);

  // Calculate winning probability for urgency indicator
  const winProbability = ((option.tickets / 10000) * 100).toFixed(2);

  return (
    <motion.button
      onClick={handleClick}
      disabled={disabled}
      className={baseStyles.base}
      type="button"
      aria-label={`Seleccionar ${option.tickets} boletos por ${formatPrice(option.price)} - ${winProbability}% probabilidad de ganar`}
      whileHover={{ scale: disabled ? 1 : 1.02 }}
      whileTap={{ scale: disabled ? 1 : 0.98 }}
      transition={{ duration: 0.15, ease: "easeOut" }}
    >
      {/* Enhanced Popular Badge with urgency */}
      {isPopular && (
        <motion.div
          initial={{ scale: 0, rotate: -12 }}
          animate={{ scale: 1, rotate: 0 }}
          className="absolute -top-2 -right-2 z-20 bg-gradient-to-r from-emerald-500 to-green-500 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg"
        >
          <div className="flex items-center gap-1">
            <Zap size={10} />
            M√ÅS ELEGIDO
          </div>
        </motion.div>
      )}

      {/* Urgency indicator for high-value packages */}
      {option.tickets >= 50 && (
        <div className="absolute top-2 left-2 z-10 bg-red-500 text-white px-2 py-0.5 rounded-full text-xs font-bold animate-pulse">
          üî• OFERTA
        </div>
      )}

      {/* Main Content with enhanced visual hierarchy */}
      <div className="space-y-3">
        {/* Tickets Count with better emphasis */}
        <div className="space-y-1">
          <div className={cn(
            'text-3xl sm:text-4xl font-black leading-none tracking-tight',
            isPopular
              ? 'text-amber-700 drop-shadow-sm'
              : 'text-slate-800'
          )}>
            {option.tickets}
          </div>
          <div className={cn(
            'text-xs font-semibold uppercase tracking-wider',
            isPopular
              ? 'text-amber-600'
              : 'text-slate-500'
          )}>
            N√∫meros
          </div>
        </div>

        {/* Enhanced Price Section with trust indicators */}
        <div className="space-y-2">
          <div className={cn(
            'text-xl sm:text-2xl font-black',
            isPopular
              ? 'text-emerald-700'
              : 'text-slate-900'
          )}>
            {formatPrice(option.price)}
          </div>

          {/* Discount Badge with better visual impact */}
          {option.discount > 0 && (
            <div className="flex items-center justify-center gap-2">
              <span className="text-slate-400 line-through text-sm">
                {formatPrice(option.tickets * 250)}
              </span>
              <span className={cn(
                'inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-bold shadow-sm',
                isPopular
                  ? 'bg-emerald-100 text-emerald-800 border border-emerald-200'
                  : 'bg-red-100 text-red-800 border border-red-200'
              )}>
                <TrendingUp size={10} />
                AHORRA {option.discount}%
              </span>
            </div>
          )}

          {/* Winning probability indicator */}
          <div className="text-xs text-slate-600 font-medium bg-slate-100 px-2 py-1 rounded-full">
            {winProbability}% probabilidad de ganar
          </div>
        </div>
      </div>

      {/* Hover effect overlay for better feedback */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-500/0 via-blue-500/0 to-blue-500/10 opacity-0 hover:opacity-100 transition-opacity duration-200 rounded-2xl pointer-events-none" />
    </motion.button>
  );
});

OptimizedQuickSelectCard.displayName = 'OptimizedQuickSelectCard';

// ============================================================================
// OPTIMIZED PAYMENT METHOD CARD - ULTRA-FAST PERFORMANCE
// ============================================================================

interface OptimizedPaymentMethodCardProps {
  method: { id: string; name: string; icon: string; [key: string]: any };
  isSelected: boolean;
  onSelect: () => void;
  expanded?: boolean;
  selectedTickets?: number[];
  convertedAmounts?: any;
  cryptoLoading?: boolean;
  lastUpdate?: Date | null;
}

// ‚úÖ ULTRA-OPTIMIZED: Payment method card with mobile-first design and trust indicators
const OptimizedPaymentMethodCard: React.FC<OptimizedPaymentMethodCardProps> = React.memo(({
  method,
  isSelected,
  onSelect,
  expanded = false,
  selectedTickets = [],
  convertedAmounts = {},
  cryptoLoading = false,
  lastUpdate = null
}) => {
  // ‚úÖ PERFORMANCE: Memoized click handler with haptic feedback
  const handleClick = useCallback(() => {
    // Mobile haptic feedback
    if ('vibrate' in navigator) {
      navigator.vibrate(50);
    }
    onSelect();
  }, [onSelect]);

  // Payment method priority and trust indicators
  const getMethodPriority = useCallback(() => {
    const priorities: Record<string, { order: number; label: string; color: string; icon: string }> = {
      'binance': { order: 1, label: 'M√ÅS R√ÅPIDO', color: 'yellow', icon: 'üöÄ' },
      'oxxo': { order: 2, label: 'M√ÅS POPULAR', color: 'emerald', icon: 'üè™' },
      'bancoppel': { order: 3, label: 'CONFIABLE', color: 'blue', icon: 'üè¶' },
      'bancoazteca': { order: 4, label: 'SEGURO', color: 'purple', icon: 'üîí' }
    };
    return priorities[method.id as string] || { order: 99, label: '', color: 'slate', icon: '' };
  }, [method.id]);

  const priority = getMethodPriority();

  // ‚úÖ PERFORMANCE: Pre-calculated styles with enhanced mobile design
  const cardStyles = useMemo(() => {
    const base = 'group w-full rounded-2xl border-2 text-center relative overflow-hidden transition-all duration-200 will-change-transform focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/50 select-none touch-manipulation';

    if (expanded) {
      return cn(base, 'px-6 py-4 min-h-[80px] border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100 shadow-xl ring-2 ring-blue-200/50');
    }
    
    if (isSelected) {
      return cn(base,
        'px-4 py-6 min-h-[120px] border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100 shadow-xl ring-2 ring-blue-200/50',
        'hover:scale-[1.01] active:scale-[0.99]'
      );
    }

    // Enhanced styling based on priority
    const priorityStyles: Record<number, string> = {
      1: 'border-yellow-300 bg-gradient-to-br from-yellow-50 to-orange-50 hover:border-yellow-400 hover:shadow-yellow-200/30',
      2: 'border-emerald-300 bg-gradient-to-br from-emerald-50 to-green-50 hover:border-emerald-400 hover:shadow-emerald-200/30',
      3: 'border-blue-300 bg-gradient-to-br from-blue-50 to-indigo-50 hover:border-blue-400 hover:shadow-blue-200/30',
      4: 'border-purple-300 bg-gradient-to-br from-purple-50 to-violet-50 hover:border-purple-400 hover:shadow-purple-200/30'
    };

    return cn(base,
      'px-4 py-6 min-h-[120px] hover:scale-[1.02] active:scale-[0.98]',
      priorityStyles[priority.order] || 'border-slate-200 bg-white hover:border-blue-300 hover:bg-blue-50/50',
      'hover:shadow-lg transition-all duration-200'
    );
  }, [expanded, isSelected, priority.order]);

  return (
    <motion.button
      onClick={handleClick}
      className={cardStyles}
      whileHover={{ scale: expanded ? 1.01 : 1.02 }}
      whileTap={{ scale: 0.98 }}
      transition={{ duration: 0.15, ease: "easeOut" }}
    >
      {/* Priority Badge */}
      {priority.label && !expanded && (
        <motion.div
          initial={{ scale: 0, rotate: -12 }}
          animate={{ scale: 1, rotate: 0 }}
          className={cn(
            'absolute -top-2 -right-2 z-20 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg',
            priority.color === 'yellow' && 'bg-gradient-to-r from-yellow-500 to-orange-500',
            priority.color === 'emerald' && 'bg-gradient-to-r from-emerald-500 to-green-500',
            priority.color === 'blue' && 'bg-gradient-to-r from-blue-500 to-indigo-500',
            priority.color === 'purple' && 'bg-gradient-to-r from-purple-500 to-violet-500'
          )}
        >
          <div className="flex items-center gap-1">
            <span>{priority.icon}</span>
            <span>{priority.label}</span>
          </div>
        </motion.div>
      )}

      {/* Selection Indicator */}
      {isSelected && !expanded && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="absolute -top-2 -left-2 z-10 w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center shadow-lg"
        >
          <CheckCircle size={16} className="text-white" />
        </motion.div>
      )}

      <div className={cn(
        'flex items-center justify-center h-full',
        expanded ? 'flex-row gap-4' : 'flex-col space-y-3'
      )}>
        {/* Enhanced Logo Container */}
        <div className={cn(
          'flex items-center justify-center bg-white rounded-xl shadow-sm border border-slate-100 group-hover:shadow-md transition-shadow duration-200',
          expanded ? 'w-16 h-16 p-3' : 'w-full py-4 px-6'
        )}>
          <img
            src={method.icon}
            alt={method.name}
            className={cn(
              'object-contain group-hover:scale-105 transition-transform duration-200',
              expanded
                ? (method.id === 'binance' ? 'max-w-12 max-h-12' : 'max-w-8 max-h-8')
                : (method.id === 'binance' ? 'max-w-full max-h-[80px]' : 'max-w-full max-h-[60px]')
            )}
          />
        </div>

        {/* Enhanced Payment Method Info */}
        <div className={cn(
          'text-center',
          expanded ? 'flex-1 text-left' : ''
        )}>
          <div className="font-black text-slate-900 text-base group-hover:text-blue-700 transition-colors duration-200">
            {method.name}
          </div>

          {/* Trust & Speed Indicators */}
          {!expanded && (
            <div className="mt-2 space-y-1">
              {method.enabled && (
                <div className="flex items-center justify-center gap-2 flex-wrap">
                  <span className="inline-flex items-center gap-1 bg-emerald-100 text-emerald-800 text-xs px-2 py-1 rounded-full font-bold">
                    <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full animate-pulse" />
                    24/7
                  </span>
                  {method.id === 'binance' && (
                    <span className="inline-flex items-center gap-1 bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-bold">
                      <Zap size={10} />
                      INSTANT√ÅNEO
                    </span>
                  )}
                  {method.id === 'oxxo' && (
                    <span className="inline-flex items-center gap-1 bg-orange-100 text-orange-800 text-xs px-2 py-1 rounded-full font-bold">
                      <MapPin size={10} />
                      +20K TIENDAS
                    </span>
                  )}
                </div>
              )}

              {/* Payment Type Indicator */}
              <div className="text-xs text-slate-600 font-medium">
                {method.id === 'binance' && 'üí∞ Criptomonedas'}
                {method.id === 'oxxo' && 'üè™ Efectivo en tienda'}
                {(method.id === 'bancoppel' || method.id === 'bancoazteca') && 'üè¶ Transferencia bancaria'}
              </div>
            </div>
          )}

          {/* Crypto Prices for Binance */}
          {method.id === 'binance' && expanded && (
            <div className="mt-3 space-y-2">
              {cryptoLoading ? (
                <div className="flex items-center gap-2 text-sm font-medium text-blue-600">
                  <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin" />
                  Calculando precios...
                </div>
              ) : convertedAmounts ? (
                <div className="space-y-2 bg-gradient-to-r from-emerald-50 to-blue-50 p-3 rounded-xl border border-emerald-200/50">
                  <div className="text-xs font-bold text-emerald-800 mb-2 flex items-center gap-2">
                    <Sparkles size={12} />
                    Equivalencias disponibles:
                  </div>
                  <div className="grid grid-cols-2 gap-2 text-xs">
                    <div className="bg-white/90 p-2 rounded-lg border border-emerald-200/50">
                      <div className="font-bold text-emerald-700">‚âà {convertedAmounts.USDT?.toFixed(2)}</div>
                      <div className="text-slate-600">USDT (Recomendado)</div>
                    </div>
                    <div className="bg-white/90 p-2 rounded-lg border border-orange-200/50">
                      <div className="font-bold text-orange-600">‚âà {convertedAmounts.BTC?.toFixed(6)}</div>
                      <div className="text-slate-600">Bitcoin</div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-xs text-amber-600 font-medium bg-amber-50 px-2 py-1 rounded-lg">
                  ‚ö†Ô∏è Precios no disponibles
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Enhanced hover effect */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-500/0 via-blue-500/0 to-blue-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-200 rounded-2xl pointer-events-none" />
    </motion.button>
  );
});

OptimizedPaymentMethodCard.displayName = 'OptimizedPaymentMethodCard';

// ============================================================================
// MAIN COMPONENT
// ============================================================================

// ‚úÖ PERFORMANCE: Memoized PurchaseWizard for optimal re-renders
const PurchaseWizard: React.FC<PurchaseWizardProps> = React.memo(({
  isOpen,
  onClose,
  selectedTickets,
  onConfirmPurchase,
  onQuickSelect,
  isProcessing
}) => {
  // ============================================================================
  // STATE MANAGEMENT
  // ============================================================================

  // Obtener precio fijo del store (para cards principales)
  const { fixedPrice } = useRaffleStore();

  // Calculate if tickets are selected (this will update reactively)
  const hasTicketsSelected = selectedTickets.length >= MIN_TICKETS_PER_PURCHASE;
  
  // Initialize step based on tickets - but always allow starting from 0 for quick select
  const [currentStep, setCurrentStep] = useState(() => {
    return hasTicketsSelected ? 1 : 0;
  });
  const [customerData, setCustomerData] = useState<CustomerData>({
    name: '',
    email: '',
    phone: '',
    city: '',
    state: 'M√©xico'
  });
  
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');
  const [validationErrors, setValidationErrors] = useState<ValidationErrors>({});
  const [copiedField, setCopiedField] = useState<string>('');
  const [paymentScreenshot, setPaymentScreenshot] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>('');
  const [isSelectingTickets, setIsSelectingTickets] = useState(false);
  
  // ‚úÖ ENHANCED: Use unified Master Counter system + Protection hooks
  const masterCounters = useMasterCounters();
  const isConnected = masterCounters.isConnected;
  const supabaseLoading = masterCounters.isLoading;

  // ‚úÖ CRITICAL: Oversell protection and reservation cleanup
  const { atomicReserveTickets, validateTicketsBeforeReservation } = useOversellProtection();
  const { cleanupExpiredReservations } = useReservationCleanup({
    enableAutoCleanup: true,
    showLogs: false
  });
  
  // Calcular precio total - priorizar precio fijo de cards principales
  const totalPrice = useMemo(() => {
    const ticketCount = selectedTickets.length;

    // 1. Si hay precio fijo (cards principales), usar ese precio
    if (fixedPrice !== null) {
      console.log('üí∞ PRECIO FIJO desde cards principales:', fixedPrice);
      return fixedPrice;
    }

    // 2. Si viene del modal wizard, buscar precio con descuento
    const matchingOption = QUICK_SELECT_OPTIONS.find(option => option.tickets === ticketCount);

    if (matchingOption) {
      console.log('üí∞ PRECIO CON DESCUENTO desde modal wizard:', matchingOption.price);
      return matchingOption.price;
    }

    // 3. Selecci√≥n manual - precio base sin descuentos
    const basePrice = ticketCount * 250;
    console.log('üí∞ PRECIO BASE selecci√≥n manual:', basePrice);
    return basePrice;
  }, [selectedTickets.length, fixedPrice]);

  // ‚úÖ PERFORMANCE: Lazy crypto loading - only when needed
  const { convertedAmounts, loading: cryptoLoading, error: cryptoError, lastUpdate, activate: activateCrypto, isActive: cryptoActive } = useLazyCryptoPrice(selectedTickets.length * 250);

  // üöÄ NEW: Enhanced crypto conversion system
  const {
    conversions: newConversions,
    stablecoins,
    mainCryptos,
    loading: newCryptoLoading,
    error: newCryptoError,
    lastUpdate: newLastUpdate,
    refresh: refreshCrypto
  } = useCryptoConversion(totalPrice, cryptoActive);

  // Get real available tickets from Master Counter
  const getRealAvailableTickets = useCallback(async (): Promise<number[]> => {
    try {
      console.log('üé´ WIZARD: Getting real available tickets from Master Counter');

      // Use real available count from master counter
      const realAvailableCount = masterCounters.availableTickets;
      const realSoldTickets = masterCounters.soldTickets;
      const realReservedTickets = masterCounters.reservedTickets;

      console.log('üìä WIZARD: Master Counter data:', {
        available: realAvailableCount,
        sold: realSoldTickets,
        reserved: realReservedTickets,
        total: masterCounters.totalTickets
      });

      // Calculate available ticket numbers
      const allTickets = Array.from({ length: 10000 }, (_, i) => i + 1);

      // For now, return a simple calculation based on available count
      // In production, you might want to fetch specific available numbers from Supabase
      const availableTickets = allTickets.slice(0, realAvailableCount);

      console.log(`‚úÖ WIZARD: Returning ${availableTickets.length} available tickets`);
      return availableTickets;
    } catch (error) {
      console.error('‚ùå WIZARD: Error getting available tickets:', error);
      return [];
    }
  }, [masterCounters.availableTickets, masterCounters.soldTickets, masterCounters.reservedTickets, masterCounters.totalTickets]);

  // ============================================================================
  // WIZARD CONFIGURATION
  // ============================================================================
  
  const wizardSteps: WizardStep[] = useMemo(() => {
    const baseSteps = [
      {
        number: 0,
        title: 'Selecci√≥n',
        description: 'Elige tus n√∫meros',
        icon: <Zap size={16} />,
        color: 'mexican-gold'
      },
      {
        number: 1,
        title: 'Confirmaci√≥n',
        description: 'Verifica tu selecci√≥n',
        icon: <CheckCircle size={16} />,
        color: 'mexican-red'
      },
      {
        number: 2,
        title: 'Pago',
        description: 'M√©todo de pago',
        icon: <CreditCard size={16} />,
        color: 'mexican-green'
      },
      {
        number: 3,
        title: 'Datos',
        description: 'Tu informaci√≥n',
        icon: <Users size={16} />,
        color: 'sunset-orange'
      },
      {
        number: 4,
        title: 'Comprobante',
        description: 'Sube tu captura',
        icon: <Camera size={16} />,
        color: 'tequila-amber'
      }
    ];

    return hasTicketsSelected ? baseSteps.slice(1) : baseSteps;
  }, [hasTicketsSelected]);


  // üöÄ NEW: Get payment methods from configuration
  const configuredPaymentMethods = getPaymentMethods();
  const paymentValidation = validatePaymentConfig();

  // Filter main payment methods (4 methods in 2x2 grid) - prioritize configured methods
  const mainPaymentMethods = configuredPaymentMethods.length > 0
    ? configuredPaymentMethods.filter(method =>
        ['bancoppel', 'bancoazteca', 'oxxo', 'binance'].includes(method.id)
      )
    : PAYMENT_METHODS.filter(method =>
        ['bancoppel', 'bancoazteca', 'oxxo', 'binance'].includes(method.id)
      );

  const mexicanStates = [
    'Aguascalientes', 'Baja California', 'Baja California Sur', 'Campeche',
    'Chiapas', 'Chihuahua', 'Ciudad de M√©xico', 'Coahuila', 'Colima',
    'Durango', 'Guanajuato', 'Guerrero', 'Hidalgo', 'Jalisco', 'M√©xico',
    'Michoac√°n', 'Morelos', 'Nayarit', 'Nuevo Le√≥n', 'Oaxaca', 'Puebla',
    'Quer√©taro', 'Quintana Roo', 'San Luis Potos√≠', 'Sinaloa', 'Sonora',
    'Tabasco', 'Tamaulipas', 'Tlaxcala', 'Veracruz', 'Yucat√°n', 'Zacatecas'
  ];

  // ============================================================================
  // EFFECT HOOKS
  // ============================================================================

  // Reset wizard when opening
  useEffect(() => {
    if (isOpen) {
      // Always start at step 0 if no tickets, or step 1 if tickets exist
      const initialStep = selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? 1 : 0;
      setCurrentStep(initialStep);
      setValidationErrors({});
      setSelectedPaymentMethod('');
      setCopiedField('');
      setPaymentScreenshot(null);
      setPreviewUrl('');
      setIsSelectingTickets(false); // Reset click blocking state
      
      console.log('üîÑ WIZARD RESET:', {
        isOpen,
        selectedTickets: selectedTickets.length,
        initialStep,
        hasTicketsSelected: selectedTickets.length >= MIN_TICKETS_PER_PURCHASE
      });
    }
  }, [isOpen, selectedTickets.length]);

  // Update step when tickets are selected (from external grid or quick select)
  useEffect(() => {
    console.log('üîÑ WIZARD: useEffect triggered - selectedTickets change:', {
      isOpen,
      selectedTicketsLength: selectedTickets.length,
      minRequired: MIN_TICKETS_PER_PURCHASE,
      currentStep,
      isSelectingTickets,
      shouldAdvance: isOpen && selectedTickets.length >= MIN_TICKETS_PER_PURCHASE && currentStep === 0
    });
    
    // Don't proceed if modal is not open
    if (!isOpen) return;
    
    // Always clear isSelectingTickets when selectedTickets changes (means store updated)
    if (isSelectingTickets && selectedTickets.length >= MIN_TICKETS_PER_PURCHASE) {
      console.log('‚úÖ WIZARD: Store updated with tickets, clearing isSelectingTickets');
      setIsSelectingTickets(false);
    }
    
    // ‚úÖ PERFORMANCE: Advance to step 1 instantly when tickets are selected
    if (selectedTickets.length >= MIN_TICKETS_PER_PURCHASE && currentStep === 0) {
      console.log('üöÄ WIZARD: Advancing to confirmation step instantly');
      setCurrentStep(1);
    }
  }, [selectedTickets.length, currentStep, isOpen, isSelectingTickets]);

  // Cleanup preview URL
  useEffect(() => {
    return () => {
      if (previewUrl) {
        URL.revokeObjectURL(previewUrl);
      }
    };
  }, [previewUrl]);

  // ============================================================================
  // VALIDATION LOGIC
  // ============================================================================

  // ‚úÖ PERFORMANCE: Optimized validation with early returns
  const validateTicketSelection = useCallback(async (): Promise<boolean> => {
    console.log('üîç WIZARD: Starting enhanced ticket validation...', {
      selectedTickets: selectedTickets.length,
      uniqueTickets: new Set(selectedTickets).size
    });

    // ‚úÖ CRITICAL: Check for duplicates in selection FIRST
    const uniqueTickets = [...new Set(selectedTickets)];
    if (uniqueTickets.length !== selectedTickets.length) {
      const duplicates = selectedTickets.filter((ticket, index) =>
        selectedTickets.indexOf(ticket) !== index
      );
      console.error('‚ùå WIZARD: Duplicate tickets detected:', duplicates);
      setValidationErrors({
        tickets: `Tickets duplicados detectados: ${duplicates.map(formatTicketNumber).join(', ')}. Esto indica un error en la selecci√≥n.`
      });
      return false;
    }

    // Early return for basic validation
    if (selectedTickets.length === 0) {
      setValidationErrors({
        tickets: 'Debes seleccionar al menos algunos boletos para continuar.'
      });
      return false;
    }

    if (selectedTickets.length < MIN_TICKETS_PER_PURCHASE) {
      setValidationErrors({
        tickets: `M√≠nimo ${MIN_TICKETS_PER_PURCHASE} boletos requeridos. No se permite comprar 1 solo boleto por razones de equidad en el sorteo.`
      });
      return false;
    }

    // Use Master Counter for real-time validation instead of deprecated hook
    if (!isConnected) {
      console.warn('‚ö†Ô∏è WIZARD: No connection to Supabase, using local validation');
      return true;
    }

    try {
      // Get real-time data from Master Counter
      const realAvailableCount = masterCounters.availableTickets;
      const realSoldCount = masterCounters.soldTickets;
      const realReservedCount = masterCounters.reservedTickets;

      console.log('üìä WIZARD: Master Counter validation data:', {
        available: realAvailableCount,
        sold: realSoldCount,
        reserved: realReservedCount,
        selectedCount: selectedTickets.length
      });

      // Check if there are enough available tickets
      if (realAvailableCount === 0) {
        setValidationErrors({
          tickets: '¬°Lo sentimos! Todos los boletos est√°n agotados. El sorteo ha terminado.'
        });
        return false;
      }

      if (realAvailableCount < selectedTickets.length) {
        setValidationErrors({
          tickets: `Solo quedan ${realAvailableCount} boletos disponibles. Selecciona menos n√∫meros.`
        });
        return false;
      }

      // Validate that selected tickets are within valid range
      const invalidTickets = selectedTickets.filter(ticket => ticket < 1 || ticket > 10000);
      if (invalidTickets.length > 0) {
        setValidationErrors({
          tickets: `N√∫meros de boleto inv√°lidos: ${invalidTickets.map(formatTicketNumber).join(', ')}`
        });
        return false;
      }

      console.log('‚úÖ WIZARD: Enhanced validation passed', {
        selectedCount: selectedTickets.length,
        availableCount: realAvailableCount,
        uniqueCheck: 'passed',
        rangeCheck: 'passed'
      });

    } catch (error) {
      console.warn('‚ö†Ô∏è WIZARD: Error validating tickets (using fallback):', error);
      // Don't block user for connection issues, allow to proceed
      return true;
    }

    // Clear previous errors if all validation passes
    setValidationErrors(prev => {
      const { tickets, ...rest } = prev;
      return rest;
    });

    return true;
  }, [selectedTickets, isConnected, masterCounters]);

  const validateStep = useCallback(async (step: number): Promise<boolean> => {
    const errors: ValidationErrors = {};

    // Step 0: Ticket selection validation
    if (step === 0) {
      return await validateTicketSelection();
    }

    // Step 1: Confirmation (ticket validation)
    if (step === 1) {
      return await validateTicketSelection();
    }

    // Step 2: Payment method
    if (step === 2) {
      if (!selectedPaymentMethod) {
        errors.payment = 'Selecciona un m√©todo de pago';
      }
    }

    // Step 3: Customer data
    if (step === 3) {
      if (!customerData.name.trim()) {
        errors.name = 'Ingresa tu nombre completo';
      }
      if (!customerData.email.trim()) {
        errors.email = 'Ingresa tu email';
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(customerData.email)) {
        errors.email = 'Ingresa un email v√°lido';
      }
      if (!customerData.phone.trim()) {
        errors.phone = 'Ingresa tu tel√©fono';
      } else if (!/^(\+52|52)?\s?[1-9]\d{9}$/.test(customerData.phone.replace(/\s/g, ''))) {
        errors.phone = 'Ingresa un tel√©fono v√°lido (10 d√≠gitos)';
      }
      if (!customerData.city.trim()) {
        errors.city = 'Ingresa tu ciudad';
      }
    }

    // Step 4: Payment proof
    if (step === 4) {
      if (!paymentScreenshot) {
        errors.screenshot = 'Sube una captura de pantalla de tu comprobante de pago';
      }
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  }, [selectedPaymentMethod, customerData, paymentScreenshot, validateTicketSelection]);

  // ============================================================================
  // EVENT HANDLERS
  // ============================================================================

  const handleFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      setValidationErrors({ screenshot: 'Por favor selecciona una imagen (JPG, PNG, etc.)' });
      return;
    }

    // Validate file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setValidationErrors({ screenshot: 'La imagen es muy grande. M√°ximo 10MB.' });
      return;
    }

    setPaymentScreenshot(file);

    // Create preview
    if (previewUrl) {
      URL.revokeObjectURL(previewUrl);
    }
    const newPreviewUrl = URL.createObjectURL(file);
    setPreviewUrl(newPreviewUrl);

    // Clear errors
    setValidationErrors(prev => {
      const { screenshot, ...rest } = prev;
      return rest;
    });
  }, [previewUrl]);

  const handleNext = useCallback(async () => {
    // Extra validation: never allow advancing from step 1 without tickets
    if (currentStep === 1 && selectedTickets.length < MIN_TICKETS_PER_PURCHASE) {
      setValidationErrors({
        tickets: `Debes seleccionar al menos ${MIN_TICKETS_PER_PURCHASE} boletos antes de continuar.`
      });
      return;
    }
    
    if (await validateStep(currentStep)) {
      if (currentStep < 4) {
        setCurrentStep(currentStep + 1);
      }
    }
  }, [currentStep, validateStep, selectedTickets.length]);

  const handleBack = useCallback(() => {
    // Calculate minimum step dynamically
    const minStep = selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? 1 : 0;
    if (currentStep > minStep) {
      setCurrentStep(currentStep - 1);
    }
  }, [currentStep, selectedTickets.length]);

  const handleFinish = useCallback(async () => {
    if (await validateStep(4)) {
      try {
        await onConfirmPurchase(customerData, selectedPaymentMethod);
      } catch (error) {
        console.error('Error en compra:', error);
      }
    }
  }, [validateStep, onConfirmPurchase, customerData, selectedPaymentMethod]);

  const copyToClipboard = useCallback((text: string, field: string) => {
    navigator.clipboard.writeText(text);
    setCopiedField(field);
    setTimeout(() => setCopiedField(''), 2000);
  }, []);

  // ‚úÖ PERFORMANCE: Optimized instant quick select with enhanced logging
  const handleQuickSelect = useCallback(async (ticketCount: number) => {
    console.log(`üöÄ MODAL WIZARD: handleQuickSelect called with ${ticketCount} boletos`);

    // Clear any previous errors
    setValidationErrors({});
    setIsSelectingTickets(true);

    console.log(`‚ö° Estado: isSelectingTickets = true para ${ticketCount} boletos`);

    // Validate minimum tickets
    if (ticketCount < MIN_TICKETS_PER_PURCHASE) {
      setValidationErrors({
        quickSelect: `M√≠nimo ${MIN_TICKETS_PER_PURCHASE} boletos requeridos para participar en el sorteo`
      });
      setIsSelectingTickets(false);
      return;
    }

    try {
      // Optimized: Skip availability check for instant UX
      // The store will handle conflicts automatically
      console.log('üöÄ WIZARD: Instant quick select with count:', ticketCount);

      // Call the parent's onQuickSelect function instantly
      onQuickSelect(ticketCount);

      // Clear errors immediately
      setValidationErrors({});

    } catch (error) {
      console.error('Error in quick select:', error);
      setValidationErrors({
        quickSelect: 'Error al seleccionar boletos. Intenta de nuevo.'
      });
    } finally {
      // Always reset selection state
      setIsSelectingTickets(false);
    }
  }, [onQuickSelect]);

  // ============================================================================
  // RENDER HELPERS
  // ============================================================================

  const renderStepProgress = () => (
    <div className="flex items-center gap-2 sm:gap-3">
      {wizardSteps.map((step, index) => (
        <React.Fragment key={step.number}>
          <div className="flex items-center">
            <div className={cn(
              'w-8 h-8 sm:w-10 sm:h-10 rounded-2xl flex items-center justify-center text-xs sm:text-sm font-bold transition-all duration-200 ease-out ring-2',
              currentStep > step.number 
                ? 'bg-gradient-to-br from-emerald-500 to-emerald-600 text-white ring-emerald-300/40 shadow-lg shadow-emerald-500/20 scale-110' 
                : currentStep === step.number
                ? 'bg-gradient-to-br from-blue-600 to-blue-700 text-white ring-blue-300/40 shadow-lg shadow-blue-500/20 scale-110 animate-pulse'
                : 'bg-gradient-to-br from-slate-100 to-slate-200 text-slate-500 ring-slate-200/50 hover:ring-slate-300/60'
            )}>
              {currentStep > step.number ? (
                <CheckCircle size={14} className="animate-in zoom-in-50 duration-300" />
              ) : (
                <span>{selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? step.number : step.number + 1}</span>
              )}
            </div>
          </div>
          {index < wizardSteps.length - 1 && (
            <div className="flex-1 h-2 sm:h-3 mx-1 sm:mx-3 rounded-full bg-gradient-to-r from-slate-100 to-slate-200 shadow-inner overflow-hidden">
              <div className={cn(
                'h-full rounded-full transition-all duration-300 ease-out',
                currentStep > step.number ? 'bg-gradient-to-r from-emerald-500 to-emerald-600 shadow-sm' : 'bg-transparent'
              )} />
            </div>
          )}
        </React.Fragment>
      ))}
    </div>
  );

  const renderPaymentMethodAnimation = () => {
    const selectedMethod = mainPaymentMethods.find(m => m.id === selectedPaymentMethod);
    const unselectedMethods = mainPaymentMethods.filter(m => m.id !== selectedPaymentMethod);

    return (
      <LayoutGroup>
        <AnimatePresence mode="wait">
          {!selectedPaymentMethod ? (
            // Initial 2x2 grid layout
            <motion.div 
              key="grid"
              className="grid grid-cols-2 gap-4 sm:gap-6"
              initial={{ opacity: 0, scale: 0.98 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.98 }}
              transition={{ duration: 0.15, ease: "easeOut" }}
            >
              {mainPaymentMethods.map((method, index) => (
                <div key={method.id}>
                  <OptimizedPaymentMethodCard
                    method={method}
                    isSelected={false}
                    onSelect={() => {
                      setSelectedPaymentMethod(method.id);
                      // ‚úÖ PERFORMANCE: Activate crypto only when Binance is selected
                      if (method.id === 'binance' && !cryptoActive) {
                        activateCrypto();
                      }
                    }}
                    selectedTickets={selectedTickets}
                    convertedAmounts={convertedAmounts}
                    cryptoLoading={cryptoLoading}
                    lastUpdate={lastUpdate}
                  />
                </div>
              ))}
            </motion.div>
          ) : (
            // Selected layout: top row (3 small) + bottom expanded
            <motion.div 
              key="selected"
              className="space-y-6"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              {/* Top row - small unselected methods */}
              <motion.div 
                className="flex justify-center gap-3"
                initial={{ y: -5, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.15, delay: 0.02 }}
              >
                {unselectedMethods.map((method, index) => (
                  <motion.button
                    key={method.id}
                    layoutId={method.id}
                    onClick={() => {
                      setSelectedPaymentMethod(method.id);
                      // ‚úÖ PERFORMANCE: Activate crypto when switching to Binance
                      if (method.id === 'binance' && !cryptoActive) {
                        activateCrypto();
                      }
                    }}
                    className="group relative w-16 h-16 sm:w-20 sm:h-20 rounded-2xl border-2 border-slate-200/60 bg-gradient-to-br from-white to-slate-50/40 hover:border-blue-300/70 hover:shadow-lg overflow-hidden"
                    initial={{ scale: 0.95, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    transition={{ 
                      duration: 0.15, 
                      delay: index * 0.02,
                      ease: "easeOut" 
                    }}
                    whileHover={{ 
                      scale: 1.1,
                      transition: { duration: 0.1 }
                    }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <div className="absolute inset-0 flex items-center justify-center">
                      <img
                        src={method.icon}
                        alt={method.name}
                        className="max-w-8 max-h-8 sm:max-w-10 sm:max-h-10 object-contain filter group-hover:scale-110 transition-transform duration-200"
                      />
                    </div>
                  </motion.button>
                ))}
              </motion.div>

              {/* Bottom - expanded selected method */}
              {selectedMethod && (
                <div key={selectedMethod.id}>
                  <OptimizedPaymentMethodCard
                    method={selectedMethod}
                    isSelected={true}
                    onSelect={() => {}}
                    expanded={true}
                    selectedTickets={selectedTickets}
                    convertedAmounts={convertedAmounts}
                    cryptoLoading={cryptoLoading}
                    lastUpdate={lastUpdate}
                  />
                </div>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </LayoutGroup>
    );
  };

  // ============================================================================
  // RENDER CONDITIONS
  // ============================================================================

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          {/* ‚úÖ SOLID BACKDROP: Light background overlay */}
          <motion.div
            className="fixed inset-0 bg-gray-100/80 backdrop-blur-sm"
            onClick={onClose}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
          />
          
          {/* Modal Container */}
          <div className="flex items-center justify-center min-h-screen p-3 sm:p-6">
            {/* ‚úÖ PERFORMANCE: Optimized modal animation */}
            <motion.div 
              className="relative w-full max-w-md sm:max-w-lg md:max-w-xl lg:max-w-2xl"
              style={{ maxHeight: '90vh' }}
              initial={{ opacity: 0, scale: 0.95, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.95, y: 20 }}
              transition={{ 
                duration: 0.25, 
                ease: "easeOut"
              }}
            >
          {/* ‚úÖ PERFORMANCE: Optimized modal background */}
          <div className="bg-white/98 rounded-3xl shadow-2xl ring-1 ring-slate-200/60 border border-white/30 overflow-hidden flex flex-col max-h-[90vh]">
          
            {/* Header */}
            {/* ‚úÖ PERFORMANCE: Simplified header background */}
            <div className="shrink-0 bg-gradient-to-r from-slate-50/95 to-white/95 border-b border-slate-200/60 px-4 sm:px-6 py-3 sm:py-4">
              <div className="flex items-center justify-between mb-3 sm:mb-4">
                <div className="flex items-center gap-3 sm:gap-4">
                  {currentStep > (selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? 1 : 0) && (
                    <button
                      onClick={handleBack}
                      className="group relative bg-gradient-to-br from-slate-100 to-slate-50 hover:from-slate-200 hover:to-slate-100 text-slate-700 p-2 sm:p-2.5 rounded-xl transition-all duration-300 ease-out ring-1 ring-slate-200/50 hover:ring-slate-300/50 hover:shadow-md active:scale-95 focus:outline-none focus:ring-2 focus:ring-blue-500/30"
                      disabled={isProcessing}
                    >
                      <ArrowLeft size={16} className="group-hover:-translate-x-0.5 transition-transform duration-200" />
                    </button>
                  )}
                  <div className="space-y-1">
                    <h2 className="text-lg sm:text-xl font-bold bg-gradient-to-r from-slate-900 to-slate-700 bg-clip-text text-transparent">
                      {wizardSteps[selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? currentStep - 1 : currentStep]?.title}
                    </h2>
                    <p className="text-xs sm:text-sm text-slate-600 font-medium">
                      {wizardSteps[selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? currentStep - 1 : currentStep]?.description}
                    </p>
                  </div>
                </div>
                
                <button
                  onClick={onClose}
                  className="group text-slate-400 hover:text-slate-600 p-2 rounded-xl hover:bg-slate-100/80 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-slate-300/50 active:scale-95"
                  disabled={isProcessing}
                >
                  <X size={18} className="group-hover:rotate-90 transition-transform duration-300" />
                </button>
              </div>
              
              {/* Progress Indicator */}
              {renderStepProgress()}
            </div>

            {/* Content Container */}
            <div className="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-slate-300 scrollbar-track-slate-100">
              <div className="p-4 sm:p-6 space-y-6">
                
                <AnimatePresence mode="wait">
                  {/* Step 0: Quick Selection */}
                  {currentStep === 0 && (
                    <motion.div
                      key="step-0"
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -20 }}
                      transition={{ duration: 0.25, ease: "easeInOut" }}
                    >
                      <QuickSelectionStep
                        onQuickSelect={handleQuickSelect}
                        validationError={validationErrors.quickSelect}
                        isSelectingTickets={isSelectingTickets}
                      />
                    </motion.div>
                  )}

                  {/* Step 1: Confirmation */}
                  {currentStep === 1 && (
                    <motion.div
                      key="step-1"
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -20 }}
                      transition={{ duration: 0.25, ease: "easeInOut" }}
                    >
                      <ConfirmationStep
                        selectedTickets={selectedTickets}
                        totalPrice={totalPrice}
                        validationError={validationErrors.tickets}
                      />
                    </motion.div>
                  )}

                  {/* Step 2: Payment Methods */}
                  {currentStep === 2 && (
                    <motion.div
                      key="step-2"
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -20 }}
                      transition={{ duration: 0.25, ease: "easeInOut" }}
                      className="space-y-8"
                    >
                      <motion.div
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.25, delay: 0.1 }}
                      >
                        <StepHeader
                          icon={<CreditCard size={28} />}
                          title="Elige tu m√©todo de pago"
                          description="Selecciona c√≥mo prefieres pagar"
                          color="blue"
                        />
                      </motion.div>

                      {/* Selected Tickets Summary - Enhanced Visibility */}
                      <motion.div
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.25, delay: 0.15 }}
                        className="bg-gradient-to-r from-blue-50 to-cyan-50 border-2 border-blue-300 rounded-2xl p-5 shadow-lg shadow-blue-200/30"
                      >
                        <div className="flex items-center justify-between mb-4">
                          <div className="flex items-center gap-2">
                            <div className="w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
                            <h4 className="font-bold text-blue-900 text-base">Tus n√∫meros seleccionados</h4>
                          </div>
                          <span className="text-xs font-bold text-white bg-blue-600 px-3 py-1.5 rounded-full">
                            {selectedTickets.length} n√∫mero{selectedTickets.length !== 1 ? 's' : ''}
                          </span>
                        </div>

                        {/* Numbers Display - Always Visible */}
                        {selectedTickets.length > 0 ? (
                          <div className="mb-4">
                            <div className="flex flex-wrap gap-2 mb-3 max-h-24 overflow-y-auto p-2 bg-white/80 rounded-xl">
                              {selectedTickets.slice(0, 20).map((ticket, index) => (
                                <span
                                  key={ticket}
                                  className="text-sm font-mono font-bold bg-blue-600 text-white border border-blue-700 px-3 py-1.5 rounded-lg shadow-sm"
                                >
                                  {formatTicketNumber(ticket)}
                                </span>
                              ))}
                              {selectedTickets.length > 20 && (
                                <span className="text-sm font-bold text-blue-600 bg-blue-100 px-3 py-1.5 rounded-lg">
                                  +{selectedTickets.length - 20} m√°s
                                </span>
                              )}
                            </div>
                          </div>
                        ) : (
                          <div className="mb-4 text-center py-4">
                            <div className="text-amber-600 font-bold text-sm">
                              ‚ö†Ô∏è No hay n√∫meros seleccionados
                            </div>
                            <div className="text-xs text-amber-500 mt-1">
                              Regresa al paso anterior para seleccionar tus n√∫meros
                            </div>
                          </div>
                        )}

                        <div className="flex items-center justify-between text-sm bg-white/60 rounded-lg p-3">
                          <span className="text-blue-700 font-bold">Total a pagar:</span>
                          <span className="text-blue-900 font-black text-xl">{formatPrice(totalPrice)}</span>
                        </div>
                      </motion.div>

                      <motion.div
                        initial={{ opacity: 0, y: 15 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3, delay: 0.2 }}
                      >
                        {renderPaymentMethodAnimation()}
                      </motion.div>

                      {/* Payment Details Section */}
                      {selectedPaymentMethod && (
                        <motion.div
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.4, delay: 0.2 }}
                          className="relative bg-gradient-to-br from-emerald-50 to-emerald-100/80 backdrop-blur-sm border border-emerald-200/60 rounded-2xl p-6 ring-1 ring-emerald-200/30 shadow-lg"
                        >
                          <div className="absolute inset-0 bg-gradient-to-br from-white/40 to-transparent rounded-2xl" />
                          <div className="relative">
                            {(() => {
                              const selectedMethod = mainPaymentMethods.find(m => m.id === selectedPaymentMethod);
                              if (!selectedMethod) return null;

                              return (
                                <div>
                                  <h4 className="font-bold text-emerald-900 mb-6 flex items-center gap-3 text-lg">
                                    <div className="p-2 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl shadow-lg shadow-emerald-500/25">
                                      <CreditCard size={18} className="text-white" />
                                    </div>
                                    <span className="bg-gradient-to-r from-emerald-900 to-emerald-700 bg-clip-text text-transparent">
                                      Datos para tu transferencia - {selectedMethod.name}
                                    </span>
                                  </h4>

                                  <div className="bg-white/90 backdrop-blur-sm p-5 rounded-2xl space-y-4 ring-1 ring-emerald-200/50 shadow-md">
                                    {selectedMethod.id === 'binance' ? (
                                      <div className="space-y-4">
                                        <div className="flex justify-between items-center group">
                                          <span className="text-emerald-700 font-semibold flex items-center gap-2">
                                            <span className="w-2 h-2 bg-emerald-500 rounded-full"></span>
                                            Email Binance Pay:
                                          </span>
                                          <div className="flex items-center gap-2">
                                            <span className="font-mono font-bold text-slate-900 bg-slate-100 px-3 py-1 rounded-lg">
                                              {selectedMethod.account}
                                            </span>
                                            <button
                                              onClick={() => copyToClipboard(selectedMethod.account, 'binance-email')}
                                              className="p-2 text-emerald-600 hover:text-emerald-700 hover:bg-emerald-100 rounded-xl transition-all duration-200 hover:scale-110 active:scale-95"
                                            >
                                              {copiedField === 'binance-email' ? <CheckCircle size={16} /> : <Copy size={16} />}
                                            </button>
                                          </div>
                                        </div>

                                        {/* Enhanced Crypto Prices Display */}
                                        {(newConversions || convertedAmounts) && (
                                          <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-xl border border-blue-200">
                                            <div className="text-sm font-bold text-blue-800 mb-3 flex items-center justify-between">
                                              <span>üí∞ Equivalencias para {formatPrice(totalPrice)}:</span>
                                              {(newCryptoLoading || cryptoLoading) && (
                                                <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                                              )}
                                            </div>

                                            {/* Stablecoins Section */}
                                            {(newConversions || stablecoins) && (
                                              <>
                                                <div className="text-xs font-semibold text-emerald-700 mb-2 flex items-center gap-2">
                                                  üíµ Stablecoins (Recomendado - Precio estable):
                                                </div>
                                                <div className="grid grid-cols-2 gap-2 mb-4">
                                                  <div className="bg-white/90 p-3 rounded-lg border border-green-200 shadow-sm hover:shadow-md transition-shadow">
                                                    <div className="flex items-center gap-2 mb-1">
                                                      <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                                                        <span className="text-white text-xs font-bold">‚ÇÆ</span>
                                                      </div>
                                                      <span className="font-bold text-green-700 text-sm">USDT</span>
                                                    </div>
                                                    <div className="font-bold text-green-700">
                                                      ‚âà {(newConversions?.USDT?.amount || convertedAmounts?.USDT)?.toFixed(2)}
                                                    </div>
                                                    <div className="text-xs text-slate-600">Tether (USD)</div>
                                                  </div>
                                                  <div className="bg-white/90 p-3 rounded-lg border border-green-200 shadow-sm hover:shadow-md transition-shadow">
                                                    <div className="flex items-center gap-2 mb-1">
                                                      <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                                                        <span className="text-white text-xs font-bold">$</span>
                                                      </div>
                                                      <span className="font-bold text-green-700 text-sm">USDC</span>
                                                    </div>
                                                    <div className="font-bold text-green-700">
                                                      ‚âà {(newConversions?.USDC?.amount || convertedAmounts?.USDC)?.toFixed(2)}
                                                    </div>
                                                    <div className="text-xs text-slate-600">USD Coin</div>
                                                  </div>
                                                </div>
                                              </>
                                            )}

                                            {/* Main Cryptos Section */}
                                            <div className="text-xs font-semibold text-purple-700 mb-2">üöÄ Criptomonedas Principales:</div>
                                            <div className="grid grid-cols-2 gap-2">
                                              <div className="bg-white/90 p-3 rounded-lg border border-orange-200 shadow-sm hover:shadow-md transition-shadow">
                                                <div className="flex items-center gap-2 mb-1">
                                                  <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center">
                                                    <span className="text-white text-xs font-bold">‚Çø</span>
                                                  </div>
                                                  <span className="font-bold text-orange-600 text-sm">BTC</span>
                                                </div>
                                                <div className="font-bold text-orange-600">
                                                  ‚âà {(newConversions?.BTC?.amount || convertedAmounts?.BTC)?.toFixed(6)}
                                                </div>
                                                <div className="text-xs text-slate-600">Bitcoin</div>
                                              </div>
                                              <div className="bg-white/90 p-3 rounded-lg border border-blue-200 shadow-sm hover:shadow-md transition-shadow">
                                                <div className="flex items-center gap-2 mb-1">
                                                  <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                                                    <span className="text-white text-xs font-bold">Œû</span>
                                                  </div>
                                                  <span className="font-bold text-blue-600 text-sm">ETH</span>
                                                </div>
                                                <div className="font-bold text-blue-600">
                                                  ‚âà {(newConversions?.ETH?.amount || convertedAmounts?.ETH)?.toFixed(4)}
                                                </div>
                                                <div className="text-xs text-slate-600">Ethereum</div>
                                              </div>
                                              <div className="bg-white/90 p-3 rounded-lg border border-purple-200 shadow-sm hover:shadow-md transition-shadow">
                                                <div className="flex items-center gap-2 mb-1">
                                                  <div className="w-6 h-6 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                                                    <span className="text-white text-xs font-bold">‚óà</span>
                                                  </div>
                                                  <span className="font-bold text-purple-600 text-sm">SOL</span>
                                                </div>
                                                <div className="font-bold text-purple-600">
                                                  ‚âà {(newConversions?.SOL?.amount || convertedAmounts?.SOL)?.toFixed(2)}
                                                </div>
                                                <div className="text-xs text-slate-600">Solana</div>
                                              </div>
                                              {newConversions?.BNB && (
                                                <div className="bg-white/90 p-3 rounded-lg border border-yellow-200 shadow-sm hover:shadow-md transition-shadow">
                                                  <div className="flex items-center gap-2 mb-1">
                                                    <div className="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center">
                                                      <span className="text-white text-xs font-bold">B</span>
                                                    </div>
                                                    <span className="font-bold text-yellow-600 text-sm">BNB</span>
                                                  </div>
                                                  <div className="font-bold text-yellow-600">
                                                    ‚âà {newConversions.BNB.amount.toFixed(4)}
                                                  </div>
                                                  <div className="text-xs text-slate-600">Binance Coin</div>
                                                </div>
                                              )}
                                            </div>

                                            {/* Status Footer */}
                                            <div className="mt-3 pt-2 border-t border-blue-200/50 flex justify-between items-center text-xs">
                                              <span className="text-slate-500">
                                                {newLastUpdate || lastUpdate ?
                                                  `Actualizado: ${(newLastUpdate || lastUpdate)?.toLocaleTimeString()}` :
                                                  'Calculando precios...'
                                                }
                                              </span>
                                              {refreshCrypto && (
                                                <button
                                                  onClick={refreshCrypto}
                                                  className="text-blue-600 hover:text-blue-700 font-medium"
                                                  disabled={newCryptoLoading || cryptoLoading}
                                                >
                                                  üîÑ Actualizar
                                                </button>
                                              )}
                                            </div>

                                            {(newCryptoError || cryptoError) && (
                                              <div className="mt-2 text-xs text-amber-600 bg-amber-50 p-2 rounded-lg">
                                                ‚ö†Ô∏è {newCryptoError || cryptoError}
                                              </div>
                                            )}
                                          </div>
                                        )}

                                        <div className="bg-emerald-50 p-4 rounded-xl border border-emerald-200">
                                          <p className="text-sm text-emerald-800 font-medium">
                                            üí° <strong>Importante:</strong> Transfiere cualquiera de las criptomonedas equivalentes mostradas arriba al email de Binance Pay.
                                          </p>
                                        </div>
                                      </div>
                                    ) : (
                                      <div className="space-y-4">
                                        {/* Enhanced Account Details Display */}
                                        {selectedMethod.accountDetails?.split('\n').map((line: string, index: number) => {
                                          // Better parsing for account details
                                          const colonIndex = line.indexOf(':');
                                          if (colonIndex === -1) return null;

                                          const label = line.substring(0, colonIndex).trim();
                                          const value = line.substring(colonIndex + 1).trim();

                                          if (!value || !label) return null;

                                          // Special handling for different field types
                                          const isMainAccount = label.toLowerCase().includes('tarjeta') ||
                                                               label.toLowerCase().includes('referencia') ||
                                                               label.toLowerCase().includes('email');

                                          return (
                                            <div key={index} className={cn(
                                              "flex justify-between items-center group p-3 rounded-lg transition-all duration-200",
                                              isMainAccount ? "bg-gradient-to-r from-emerald-50 to-emerald-100 border border-emerald-200" : "bg-slate-50"
                                            )}>
                                              <span className="text-emerald-700 font-semibold flex items-center gap-2">
                                                <span className={cn(
                                                  "w-2 h-2 rounded-full",
                                                  isMainAccount ? "bg-emerald-500" : "bg-slate-400"
                                                )}></span>
                                                {label}:
                                              </span>
                                              <div className="flex items-center gap-2">
                                                <span className={cn(
                                                  "font-mono font-bold px-3 py-1 rounded-lg select-all",
                                                  isMainAccount
                                                    ? "text-emerald-900 bg-white border border-emerald-200"
                                                    : "text-slate-900 bg-slate-100"
                                                )}>
                                                  {value}
                                                </span>
                                                <button
                                                  onClick={() => copyToClipboard(value, `${selectedMethod.id}-${index}`)}
                                                  className={cn(
                                                    "p-2 rounded-xl transition-all duration-200 hover:scale-110 active:scale-95",
                                                    isMainAccount
                                                      ? "text-emerald-600 hover:text-emerald-700 hover:bg-emerald-100"
                                                      : "text-slate-600 hover:text-slate-700 hover:bg-slate-200"
                                                  )}
                                                  title={`Copiar ${label.toLowerCase()}`}
                                                >
                                                  {copiedField === `${selectedMethod.id}-${index}` ?
                                                    <CheckCircle size={16} className="text-green-600" /> :
                                                    <Copy size={16} />
                                                  }
                                                </button>
                                              </div>
                                            </div>
                                          );
                                        })}

                                        {/* Payment Instructions */}
                                        <div className="bg-gradient-to-r from-emerald-50 to-blue-50 p-4 rounded-xl border border-emerald-200">
                                          <div className="flex items-start gap-3">
                                            <div className="p-2 bg-emerald-500 rounded-lg shadow-lg">
                                              <CheckCircle size={16} className="text-white" />
                                            </div>
                                            <div className="flex-1">
                                              <p className="text-sm text-emerald-800 font-medium mb-2">
                                                <strong>Instrucciones de pago:</strong>
                                              </p>
                                              <ul className="text-sm text-emerald-700 space-y-1">
                                                <li>‚Ä¢ Transfiere exactamente <strong className="text-emerald-900">{formatPrice(totalPrice)}</strong></li>
                                                <li>‚Ä¢ Usa los datos mostrados arriba</li>
                                                <li>‚Ä¢ Conserva tu comprobante de pago</li>
                                                <li>‚Ä¢ Sube la captura en el siguiente paso</li>
                                              </ul>
                                            </div>
                                          </div>
                                        </div>

                                        {/* Validation Warning for Production - Hidden for better UX */}
                                        {false && process.env.NODE_ENV === 'production' && !paymentValidation.valid && paymentValidation.missing.length > 0 && (
                                          <div className="bg-amber-50 border border-amber-200 p-4 rounded-xl">
                                            <div className="flex items-start gap-3">
                                              <div className="p-1 bg-amber-500 rounded-lg">
                                                <AlertTriangle size={14} className="text-white" />
                                              </div>
                                              <div className="flex-1">
                                                <p className="text-sm text-amber-800 font-medium mb-1">
                                                  ‚ö†Ô∏è Configuraci√≥n de producci√≥n incompleta
                                                </p>
                                                <p className="text-xs text-amber-700">
                                                  Faltan variables de entorno: {paymentValidation.missing.join(', ')}
                                                </p>
                                              </div>
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    )}
                                  </div>
                                </div>
                              );
                            })()}
                          </div>
                        </motion.div>
                      )}

                      {validationErrors.payment && (
                        <motion.div
                          initial={{ opacity: 0, scale: 0.95 }}
                          animate={{ opacity: 1, scale: 1 }}
                          transition={{ duration: 0.2 }}
                        >
                          <ErrorMessage message={validationErrors.payment} />
                        </motion.div>
                      )}
                    </motion.div>
                  )}

                  {/* Step 3: Customer Data */}
                  {currentStep === 3 && (
                    <motion.div
                      key="step-3"
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -20 }}
                      transition={{ duration: 0.25, ease: "easeInOut" }}
                    >
                      <CustomerDataStep
                        customerData={customerData}
                        onDataChange={setCustomerData}
                        validationErrors={validationErrors}
                        mexicanStates={mexicanStates}
                      />
                    </motion.div>
                  )}

                  {/* Step 4: Payment Proof */}
                  {currentStep === 4 && (
                    <motion.div
                      key="step-4"
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: -20 }}
                      transition={{ duration: 0.25, ease: "easeInOut" }}
                    >
                      <PaymentProofStep
                        selectedPaymentMethod={selectedPaymentMethod}
                        mainPaymentMethods={mainPaymentMethods}
                        customerData={customerData}
                        selectedTickets={selectedTickets}
                        totalPrice={totalPrice}
                        paymentScreenshot={paymentScreenshot}
                        previewUrl={previewUrl}
                        onFileChange={handleFileChange}
                        onRemoveFile={() => {
                          setPaymentScreenshot(null);
                          setPreviewUrl('');
                          setValidationErrors(prev => {
                        const { screenshot, ...rest } = prev;
                        return rest;
                      });
                        }}
                        validationError={validationErrors.screenshot}
                        copiedField={copiedField}
                        onCopyToClipboard={copyToClipboard}
                      />
                    </motion.div>
                  )}
                </AnimatePresence>

              </div>
            </div>

            {/* Footer */}
            <div className="shrink-0 border-t border-slate-200/60 bg-gradient-to-r from-white to-slate-50/80 backdrop-blur-sm px-4 sm:px-6 py-3 shadow-lg">
              <div className="flex flex-col sm:flex-row justify-between items-center gap-3 sm:gap-4">
                <div className="flex items-center gap-3 text-xs sm:text-sm">
                  <span className="font-bold text-slate-700">
                    Paso {selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? currentStep : currentStep + 1} de {wizardSteps.length}
                  </span>
                  <div className="relative w-12 sm:w-16 bg-slate-200 rounded-full h-2 sm:h-3 overflow-hidden shadow-inner">
                    <div 
                      className="h-full bg-gradient-to-r from-blue-600 to-blue-500 rounded-full transition-all duration-500 ease-out shadow-sm" 
                      style={{ 
                        width: `${((selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? currentStep : currentStep + 1) / wizardSteps.length) * 100}%` 
                      }}
                    />
                  </div>
                  <span className="text-slate-500 font-medium">
                    {Math.round(((selectedTickets.length >= MIN_TICKETS_PER_PURCHASE ? currentStep : currentStep + 1) / wizardSteps.length) * 100)}%
                  </span>
                </div>
                
                <div className="flex gap-2 sm:gap-3 w-full sm:w-auto justify-center sm:justify-end">
                  {currentStep < 4 && currentStep !== 0 && (
                    <button
                      onClick={handleNext}
                      disabled={isProcessing || supabaseLoading}
                      className={cn(
                        'group px-4 sm:px-6 py-2 sm:py-2.5 rounded-2xl font-bold text-sm transition-all duration-300',
                        'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white',
                        'hover:shadow-xl hover:shadow-blue-500/20 hover:scale-105 active:scale-95',
                        'focus:outline-none focus:ring-4 focus:ring-blue-300/30',
                        'disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100',
                        'flex items-center gap-2 ring-1 ring-blue-300/20',
                        'flex-1 sm:flex-initial justify-center'
                      )}
                    >
                      {supabaseLoading ? (
                        <>
                          <div className="w-3 h-3 sm:w-4 sm:h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                          <span>Validando...</span>
                        </>
                      ) : (
                        <>
                          <span>Continuar</span>
                          <ArrowRight size={14} className="group-hover:translate-x-0.5 transition-transform duration-200" />
                        </>
                      )}
                    </button>
                  )}
                  
                  {currentStep === 4 && (
                    <button
                      onClick={handleFinish}
                      disabled={isProcessing}
                      className={cn(
                        'group px-4 sm:px-6 py-2 sm:py-2.5 rounded-2xl font-bold text-sm transition-all duration-300',
                        'bg-gradient-to-r from-emerald-600 to-emerald-700 hover:from-emerald-700 hover:to-emerald-800 text-white',
                        'hover:shadow-xl hover:shadow-emerald-500/20 hover:scale-105 active:scale-95',
                        'focus:outline-none focus:ring-4 focus:ring-emerald-300/30',
                        'disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100',
                        'flex items-center gap-2 ring-1 ring-emerald-300/20',
                        'flex-1 sm:flex-initial justify-center'
                      )}
                    >
                      {isProcessing ? (
                        <>
                          <div className="w-3 h-3 sm:w-4 sm:h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                          <span>Procesando...</span>
                        </>
                      ) : (
                        <>
                          <CheckCircle size={14} className="group-hover:scale-110 transition-transform duration-200" />
                          <span>Confirmar Compra</span>
                        </>
                      )}
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
            </motion.div>
          </div>
        </div>
      )}
    </AnimatePresence>
  );
});

// ‚úÖ PERFORMANCE: Set display name for debugging
PurchaseWizard.displayName = 'PurchaseWizard';

// ============================================================================
// SUB-COMPONENTS
// ============================================================================

interface StepHeaderProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  color: string;
}

const StepHeader: React.FC<StepHeaderProps> = ({ icon, title, description, color }) => (
  <div className="text-center space-y-4">
    <div className="relative w-16 h-16 sm:w-20 sm:h-20 mx-auto">
      <div className={`absolute inset-0 bg-gradient-to-br from-${color}-400 to-${color}-600 rounded-3xl shadow-2xl shadow-${color}-500/30 animate-pulse`} />
      <div className={`relative w-full h-full bg-gradient-to-br from-${color}-500 to-${color}-600 rounded-3xl flex items-center justify-center`}>
        <div className="text-white drop-shadow-lg">
          {icon}
        </div>
      </div>
    </div>
    <div className="space-y-2">
      <h3 className="text-xl sm:text-2xl font-bold bg-gradient-to-r from-slate-900 to-slate-700 bg-clip-text text-transparent">
        {title}
      </h3>
      <p className="text-slate-600 text-base sm:text-lg font-medium">
        {description}
      </p>
    </div>
  </div>
);

interface ErrorMessageProps {
  message: string;
}

const ErrorMessage: React.FC<ErrorMessageProps> = ({ message }) => (
  <div className="relative bg-gradient-to-r from-red-50 to-red-100/80 backdrop-blur-sm border border-red-200/60 rounded-2xl p-4 text-center ring-1 ring-red-200/30 animate-in fade-in-50 slide-in-from-top-2 duration-300">
    <div className="absolute inset-0 bg-gradient-to-r from-white/30 to-transparent rounded-2xl" />
    <p className="relative text-red-800 text-sm font-bold flex items-center justify-center gap-2">
      <div className="w-5 h-5 bg-red-500 rounded-full flex items-center justify-center">
        <AlertCircle size={12} className="text-white" />
      </div>
      {message}
    </p>
  </div>
);

interface QuickSelectionStepProps {
  onQuickSelect: (count: number) => void;
  validationError?: string;
  isSelectingTickets?: boolean;
}

const QuickSelectionStep: React.FC<QuickSelectionStepProps> = ({ onQuickSelect, validationError, isSelectingTickets }) => (
  <div className="space-y-6">
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <StepHeader
        icon={<Zap size={28} />}
        title="Compra R√°pida"
        description="Elige cu√°ntos n√∫meros quieres"
        color="emerald"
      />
    </motion.div>

    {validationError && (
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3 }}
      >
        <ErrorMessage message={validationError} />
      </motion.div>
    )}

    {/* Quick Buy Cards Grid - Enhanced for all cards */}
    <div className="grid grid-cols-2 md:grid-cols-3 gap-4 w-full">
      {QUICK_SELECT_OPTIONS.map((option, index) => {
        console.log(`üîÑ Renderizando card ${index}: ${option.tickets} boletos, disabled: ${isSelectingTickets}`);
        return (
          <OptimizedQuickSelectCard
            key={`quick-${option.tickets}`}
            option={option}
            onSelect={() => {
              console.log(`üéØ onSelect triggered para ${option.tickets} boletos`);
              onQuickSelect(option.tickets);
            }}
            disabled={isSelectingTickets}
          />
        );
      })}
    </div>

    {/* Benefits Section */}
    <div className="relative bg-gradient-to-r from-blue-50 to-blue-100/80 backdrop-blur-sm border border-blue-200/60 rounded-2xl p-6 ring-1 ring-blue-200/30 shadow-lg">
      <div className="absolute inset-0 bg-gradient-to-r from-white/30 to-transparent rounded-2xl" />
      <div className="relative">
        <h4 className="font-bold text-blue-900 mb-4 flex items-center gap-3 text-lg">
          <div className="p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg shadow-blue-500/25">
            <Sparkles size={18} className="text-white" />
          </div>
          <span className="bg-gradient-to-r from-blue-900 to-blue-700 bg-clip-text text-transparent">
            ¬øPor qu√© elegir Compra R√°pida?
          </span>
        </h4>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
          <div className="flex items-center gap-3">
            <CheckCircle size={16} className="text-blue-600 flex-shrink-0" />
            <span className="text-blue-800 font-medium">N√∫meros asignados al instante</span>
          </div>
          <div className="flex items-center gap-3">
            <CheckCircle size={16} className="text-blue-600 flex-shrink-0" />
            <span className="text-blue-800 font-medium">Descuentos autom√°ticos por volumen</span>
          </div>
          <div className="flex items-center gap-3">
            <CheckCircle size={16} className="text-blue-600 flex-shrink-0" />
            <span className="text-blue-800 font-medium">Proceso m√°s r√°pido</span>
          </div>
          <div className="flex items-center gap-3">
            <CheckCircle size={16} className="text-blue-600 flex-shrink-0" />
            <span className="text-blue-800 font-medium">Misma probabilidad de ganar</span>
          </div>
        </div>
      </div>
    </div>
  </div>
);

interface ConfirmationStepProps {
  selectedTickets: number[];
  totalPrice: number;
  validationError?: string;
}

const ConfirmationStep: React.FC<ConfirmationStepProps> = ({ selectedTickets, totalPrice, validationError }) => {
  const winProbability = ((selectedTickets.length / 10000) * 100).toFixed(2);
  const savingsAmount = selectedTickets.length >= 10 ? (selectedTickets.length * 250 - totalPrice) : 0;

  return (
    <div className="space-y-6 animate-in fade-in-50 slide-in-from-bottom-4 duration-500">
      <StepHeader
        icon={<CheckCircle size={20} />}
        title="¬°Excelente selecci√≥n!"
        description={`${selectedTickets.length} n√∫mero${selectedTickets.length !== 1 ? 's' : ''} reservado${selectedTickets.length !== 1 ? 's' : ''} por 30 minutos`}
        color="blue"
      />

      {validationError && <ErrorMessage message={validationError} />}

      {/* Reservation Timer & Trust Indicator */}
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-2xl p-4"
      >
        <div className="flex items-center justify-center gap-3 text-emerald-800">
          <div className="w-3 h-3 bg-emerald-500 rounded-full animate-pulse" />
          <span className="font-bold text-sm">
            ‚úÖ Tus n√∫meros est√°n reservados por 30 minutos
          </span>
        </div>
        <div className="text-xs text-emerald-600 text-center mt-1 font-medium">
          Nadie m√°s puede seleccionarlos durante este tiempo
        </div>
      </motion.div>

      {/* Enhanced Stats Grid - Mobile Optimized with Fixed Overlapping */}
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4">
        {/* Tickets Count */}
        <div className="group relative overflow-hidden bg-gradient-to-br from-slate-50 to-slate-100/80 backdrop-blur-sm rounded-2xl p-4 sm:p-6 text-center ring-1 ring-slate-200/50 hover:ring-slate-300/60 hover:shadow-lg transition-all duration-300">
          <div className="relative z-10">
            <div className="text-2xl sm:text-3xl font-black bg-gradient-to-br from-slate-800 to-slate-600 bg-clip-text text-transparent mb-2 leading-none">
              {selectedTickets.length}
            </div>
            <div className="text-xs sm:text-sm font-semibold text-slate-600 uppercase tracking-wider">
              N√∫meros
            </div>
          </div>
        </div>

        {/* Total Price */}
        <div className="group relative overflow-hidden bg-gradient-to-br from-blue-50 to-blue-100/80 backdrop-blur-sm rounded-2xl p-4 sm:p-6 text-center ring-1 ring-blue-200/40 hover:ring-blue-300/50 hover:shadow-lg transition-all duration-300">
          <div className="relative z-10">
            <div className="text-xl sm:text-2xl lg:text-3xl font-black bg-gradient-to-br from-slate-700 to-slate-600 bg-clip-text text-transparent mb-2 leading-none">
              {formatPrice(totalPrice)}
            </div>
            <div className="text-xs sm:text-sm font-semibold text-emerald-700 uppercase tracking-wider">
              Total a Pagar
            </div>
            {savingsAmount > 0 && (
              <div className="text-xs text-emerald-600 font-bold mt-1">
                Ahorras {formatPrice(savingsAmount)}
              </div>
            )}
          </div>
        </div>

        {/* Win Probability */}
        <div className="group relative overflow-hidden bg-gradient-to-br from-orange-50 to-yellow-50 backdrop-blur-sm rounded-2xl p-4 sm:p-6 text-center ring-1 ring-orange-200/40 hover:ring-orange-300/50 hover:shadow-lg transition-all duration-300">
          <div className="relative z-10">
            <div className="text-2xl sm:text-3xl font-black bg-gradient-to-br from-orange-700 to-yellow-600 bg-clip-text text-transparent mb-2 leading-none">
              {winProbability}%
            </div>
            <div className="text-xs sm:text-sm font-semibold text-orange-700 uppercase tracking-wider">
              Probabilidad
            </div>
          </div>
        </div>
      </div>

      {/* Trust Indicators & Process Info */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* Security Info */}
        <div className="bg-gradient-to-br from-blue-50 to-blue-100/80 backdrop-blur-sm border border-blue-200/60 rounded-2xl p-5 ring-1 ring-blue-200/30">
          <div className="flex items-center gap-3 mb-3">
            <div className="p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg">
              <CheckCircle size={16} className="text-white" />
            </div>
            <h4 className="font-bold text-blue-900 text-sm">Proceso Seguro</h4>
          </div>
          <div className="space-y-2 text-xs text-blue-800">
            <div className="flex items-center gap-2">
              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full" />
              <span>Compra 100% segura y confiable</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full" />
              <span>Confirmaci√≥n instant√°nea por WhatsApp</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-1.5 h-1.5 bg-blue-500 rounded-full" />
              <span>Soporte personalizado 24/7</span>
            </div>
          </div>
        </div>

        {/* Next Steps */}
        <div className="bg-gradient-to-br from-emerald-50 to-green-50 backdrop-blur-sm border border-emerald-200/60 rounded-2xl p-5 ring-1 ring-emerald-200/30">
          <div className="flex items-center gap-3 mb-3">
            <div className="p-2 bg-gradient-to-br from-emerald-500 to-green-500 rounded-xl shadow-lg">
              <ArrowRight size={16} className="text-white" />
            </div>
            <h4 className="font-bold text-emerald-900 text-sm">Siguientes Pasos</h4>
          </div>
          <div className="space-y-2 text-xs text-emerald-800">
            <div className="flex items-center gap-2">
              <span className="flex items-center justify-center w-4 h-4 bg-emerald-500 text-white rounded-full text-xs font-bold">1</span>
              <span>Elige tu m√©todo de pago favorito</span>
            </div>
            <div className="flex items-center gap-2">
              <span className="flex items-center justify-center w-4 h-4 bg-emerald-500 text-white rounded-full text-xs font-bold">2</span>
              <span>Completa tus datos de contacto</span>
            </div>
            <div className="flex items-center gap-2">
              <span className="flex items-center justify-center w-4 h-4 bg-emerald-500 text-white rounded-full text-xs font-bold">3</span>
              <span>Sube tu comprobante y ¬°listo!</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

interface PaymentMethodCardProps {
  method: any;
  isSelected: boolean;
  onSelect: () => void;
  expanded?: boolean;
  animationDelay: number;
  selectedTickets: number[];
  convertedAmounts: any;
  cryptoLoading: boolean;
  lastUpdate: Date | null;
}

const PaymentMethodCard: React.FC<PaymentMethodCardProps> = ({ 
  method, 
  isSelected, 
  onSelect, 
  expanded = false, 
  animationDelay,
  selectedTickets,
  convertedAmounts,
  cryptoLoading,
  lastUpdate
}) => (
  <div className="space-y-3">
    <motion.button
      onClick={onSelect}
      className={cn(
        'group w-full rounded-3xl border-2 text-center relative backdrop-blur-sm overflow-hidden',
        'focus:outline-none focus:ring-4',
        expanded 
          ? 'px-6 py-4 min-h-[80px] border-blue-500 bg-gradient-to-r from-blue-50 to-blue-100/90 ring-4 ring-blue-200/60 shadow-2xl shadow-blue-500/25'
          : 'px-4 py-6 sm:px-6 sm:py-8 min-h-[120px] sm:min-h-[140px]',
        isSelected && !expanded
          ? 'border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100/90 ring-4 ring-blue-200/60 shadow-2xl shadow-blue-500/25'
          : !expanded && 'border-slate-200/60 bg-gradient-to-br from-white via-white to-slate-50/40 hover:border-blue-300/70 hover:shadow-blue-100/30 ring-1 ring-slate-200/30'
      )}
      whileHover={{ 
        scale: expanded ? 1.01 : 1.02,
        boxShadow: "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)"
      }}
      whileTap={{ scale: 0.98 }}
      transition={{ duration: 0.2 }}
    >
      {/* Selection Indicator */}
      {isSelected && !expanded && (
        <div className="absolute -top-2 -right-2 z-10">
          <div className="relative">
            <div className="absolute inset-0 bg-blue-500 rounded-full blur animate-pulse" />
            <div className="relative w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center shadow-lg shadow-blue-500/40">
              <CheckCircle size={16} className="text-white" />
            </div>
          </div>
        </div>
      )}

      <div className={cn(
        'flex items-center justify-center space-y-3 h-full',
        expanded ? 'flex-row gap-4' : 'flex-col'
      )}>
        {/* Logo Container */}
        <div className={cn(
          'relative flex items-center justify-center',
          expanded ? 'w-16 h-16' : 'flex-1 w-full'
        )}>
          <div className="absolute inset-0 bg-gradient-to-br from-white/80 to-slate-100/60 rounded-2xl shadow-inner" />
          <div className={cn(
            'relative bg-gradient-to-br from-white to-slate-50/80 rounded-2xl shadow-xl ring-1 ring-slate-200/50 group-hover:shadow-2xl transition-all duration-300 flex items-center justify-center',
            expanded ? 'w-16 h-16 p-4' : 'px-4 py-6 sm:px-6 sm:py-8 w-full h-full'
          )}>
            <img
              src={method.icon}
              alt={method.name}
              className={cn(
                'object-contain filter group-hover:scale-105 transition-transform duration-300',
                expanded 
                  ? (method.id === 'binance' ? 'max-w-12 max-h-12' : 'max-w-8 max-h-8')
                  : (method.id === 'binance' ? 'max-w-full max-h-[100px] sm:max-h-[120px]' : 'max-w-full max-h-[60px] sm:max-h-[80px]')
              )}
            />
          </div>
        </div>
        
        {/* Payment Method Info */}
        <div className={cn(
          'text-center space-y-2',
          expanded ? 'flex-1 text-left' : 'flex-shrink-0'
        )}>
          <div className="font-black text-slate-900 text-sm sm:text-base group-hover:text-blue-700 transition-colors duration-200">
            {method.name}
          </div>
          {method.enabled && (
            <div className="space-y-1">
              <span className="inline-flex items-center gap-1.5 bg-gradient-to-r from-emerald-100 to-emerald-200 text-emerald-800 text-xs px-2 py-1 rounded-full font-bold shadow-sm ring-1 ring-emerald-200/50">
                <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full animate-pulse" />
                Disponible 24/7
              </span>
              <div className="text-xs text-slate-600 font-medium">
                {method.id === 'binance' && 'Criptomonedas'}
                {method.id === 'oxxo' && 'Efectivo'}
                {(method.id === 'bancoppel' || method.id === 'bancoazteca') && 'Transferencia'}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Hover Effect Overlay */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-500/0 via-blue-500/0 to-blue-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-3xl pointer-events-none" />
    </motion.button>

    {/* Payment Details */}
    {isSelected && expanded && (
      <div className="relative bg-gradient-to-br from-slate-50 to-slate-100/50 backdrop-blur-sm rounded-2xl p-6 ring-1 ring-slate-200/50 animate-in slide-in-from-top-4 fade-in-50 duration-300">
        <div className="absolute inset-0 bg-gradient-to-br from-white/40 to-transparent rounded-2xl" />
        <div className="relative space-y-4">
          <h4 className="font-bold text-slate-900 mb-4 flex items-center gap-3 text-base">
            <div className="p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg shadow-blue-500/25">
              <FileText size={16} className="text-white" />
            </div>
            <span className="bg-gradient-to-r from-slate-900 to-slate-700 bg-clip-text text-transparent">
              {method.id === 'binance' ? 'Montos Exactos en Criptomonedas' : `Datos para ${method.name}`}
            </span>
            {method.id === 'binance' && lastUpdate && (
              <div className="flex items-center gap-2 text-xs text-slate-500">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                Actualizado: {lastUpdate.toLocaleTimeString()}
              </div>
            )}
          </h4>
          
          {/* Binance Crypto Conversions */}
          {method.id === 'binance' && (
            <div className="space-y-6">
              {/* Total Amount Header - Enhanced */}
              <div className="mb-6 p-6 bg-gradient-to-r from-yellow-50 via-orange-50 to-red-50 rounded-2xl border-2 border-yellow-200/80 shadow-lg ring-1 ring-yellow-300/20">
                <div className="flex items-center gap-3 text-yellow-900 font-bold text-lg mb-2">
                  <div className="p-2 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg shadow-md">
                    <Sparkles size={20} className="text-white" />
                  </div>
                  <span className="bg-gradient-to-r from-yellow-900 via-orange-900 to-red-900 bg-clip-text text-transparent">
                    Total: {selectedTickets.length * 250} MXN
                  </span>
                </div>
                <div className="text-base text-yellow-800 font-semibold ml-14">
                  Selecciona tu criptomoneda preferida:
                </div>
              </div>

              {/* üî• RECOMENDADAS - Enhanced Section */}
              <div className="mb-8 p-5 bg-gradient-to-br from-red-50 via-orange-50 to-pink-50 rounded-3xl border-2 border-red-200/70 shadow-xl ring-2 ring-red-100/50">
                <div className="flex items-center gap-3 text-red-800 font-black text-base mb-5">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse shadow-lg" />
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-pulse delay-150 shadow-md" />
                  </div>
                  <span className="bg-gradient-to-r from-red-700 via-orange-700 to-pink-700 bg-clip-text text-transparent">
                    üî• RECOMENDADAS - R√ÅPIDAS Y ECON√ìMICAS
                  </span>
                </div>
                
                <div className="space-y-4">
                  {/* BTC - Enhanced Premium Card */}
                  <div className="group relative bg-gradient-to-br from-orange-50 via-yellow-50 to-amber-50 backdrop-blur-sm p-6 rounded-3xl border-3 border-orange-300/70 hover:border-orange-400/90 hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] ring-2 ring-orange-200/40 hover:ring-orange-300/60">
                    {/* Enhanced Badge BTC */}
                    <div className="absolute -top-3 -right-3 z-10">
                      <div className="bg-gradient-to-r from-orange-500 via-yellow-500 to-amber-500 text-white text-sm font-black px-4 py-2 rounded-full shadow-2xl transform rotate-12 border-3 border-white backdrop-blur-sm animate-pulse ring-2 ring-orange-200/50">
                        üíé M√ÅS POPULAR
                      </div>
                    </div>
                    
                    <div className="absolute inset-0 bg-gradient-to-br from-orange-100/50 via-yellow-100/50 to-amber-100/50 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    <div className="relative flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                      <div className="flex items-center gap-5">
                        <div className="w-16 h-16 bg-gradient-to-br from-orange-500 via-yellow-500 to-amber-500 rounded-2xl flex items-center justify-center text-white font-black text-2xl shadow-xl ring-4 ring-orange-200/60 group-hover:ring-orange-300/80 transition-all duration-300">
                          ‚Çø
                        </div>
                        <div>
                          <div className="font-black text-orange-900 text-2xl mb-1">Bitcoin</div>
                          <div className="text-sm text-orange-700 font-bold bg-orange-100/60 px-3 py-1 rounded-full">
                            BTC Network ‚Ä¢ La m√°s confiable
                          </div>
                        </div>
                      </div>
                      <div className="text-right space-y-3">
                        <div className="bg-gradient-to-r from-orange-100 to-yellow-100 p-3 rounded-2xl border border-orange-200/60 shadow-inner">
                          <div className="font-mono font-black text-orange-900 text-2xl leading-none">
                            {cryptoLoading || !convertedAmounts ? (
                              <div className="flex items-center gap-2">
                                <div className="w-6 h-6 border-3 border-orange-500 border-t-transparent rounded-full animate-spin" />
                                <span className="text-lg">Cargando...</span>
                              </div>
                            ) : (
                              `${convertedAmounts?.BTC?.toFixed(8) || '...'} BTC`
                            )}
                          </div>
                          <div className="text-sm text-orange-700 font-bold mt-1">
                            ‚âà ${selectedTickets.length * 250} MXN
                          </div>
                        </div>
                        <button
                          onClick={() => convertedAmounts?.BTC && navigator.clipboard.writeText(convertedAmounts.BTC.toString())}
                          className="w-full px-5 py-3 rounded-2xl text-sm font-black transition-all duration-300 ring-2 shadow-xl active:scale-95 bg-gradient-to-r from-orange-200 to-yellow-200 text-orange-900 hover:from-orange-300 hover:to-yellow-300 ring-orange-400/60 hover:shadow-2xl hover:scale-105 border border-orange-300/50"
                        >
                          <Copy size={14} className="inline mr-2" />
                          Copiar Monto BTC
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* SOL - Enhanced Premium Card */}
                  <div className="group relative bg-gradient-to-br from-violet-50 via-purple-50 to-indigo-50 backdrop-blur-sm p-6 rounded-3xl border-3 border-violet-300/70 hover:border-violet-400/90 hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] ring-2 ring-violet-200/40 hover:ring-violet-300/60">
                    {/* Enhanced Badge SOL */}
                    <div className="absolute -top-3 -left-3 z-10">
                      <div className="bg-gradient-to-r from-violet-500 via-purple-500 to-indigo-500 text-white text-sm font-black px-4 py-2 rounded-full shadow-2xl transform -rotate-12 border-3 border-white backdrop-blur-sm animate-pulse ring-2 ring-violet-200/50">
                        ‚ö° S√öPER R√ÅPIDA
                      </div>
                    </div>
                    
                    <div className="absolute inset-0 bg-gradient-to-br from-violet-100/50 via-purple-100/50 to-indigo-100/50 rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    <div className="relative flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                      <div className="flex items-center gap-5">
                        <div className="w-16 h-16 bg-gradient-to-br from-violet-500 via-purple-500 to-indigo-500 rounded-2xl flex items-center justify-center text-white font-black text-2xl shadow-xl ring-4 ring-violet-200/60 group-hover:ring-violet-300/80 transition-all duration-300">
                          ‚óé
                        </div>
                        <div>
                          <div className="font-black text-violet-900 text-2xl mb-1">Solana</div>
                          <div className="text-sm text-violet-700 font-bold bg-violet-100/60 px-3 py-1 rounded-full">
                            SOL Network ‚Ä¢ Ultra r√°pida
                          </div>
                        </div>
                      </div>
                      <div className="text-right space-y-3">
                        <div className="bg-gradient-to-r from-violet-100 to-purple-100 p-3 rounded-2xl border border-violet-200/60 shadow-inner">
                          <div className="font-mono font-black text-violet-900 text-2xl leading-none">
                            {cryptoLoading || !convertedAmounts ? (
                              <div className="flex items-center gap-2">
                                <div className="w-6 h-6 border-3 border-violet-500 border-t-transparent rounded-full animate-spin" />
                                <span className="text-lg">Cargando...</span>
                              </div>
                            ) : (
                              `${convertedAmounts?.SOL?.toFixed(4) || '...'} SOL`
                            )}
                          </div>
                          <div className="text-sm text-violet-700 font-bold mt-1">
                            ‚âà ${selectedTickets.length * 250} MXN
                          </div>
                        </div>
                        <button
                          onClick={() => convertedAmounts?.SOL && navigator.clipboard.writeText(convertedAmounts.SOL.toString())}
                          className="w-full px-5 py-3 rounded-2xl text-sm font-black transition-all duration-300 ring-2 shadow-xl active:scale-95 bg-gradient-to-r from-violet-200 to-purple-200 text-violet-900 hover:from-violet-300 hover:to-purple-300 ring-violet-400/60 hover:shadow-2xl hover:scale-105 border border-violet-300/50"
                        >
                          <Copy size={14} className="inline mr-2" />
                          Copiar Monto SOL
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Otras Opciones - Enhanced Secondary Section */}
              <div className="space-y-4">
                <div className="flex items-center gap-3 text-slate-700 font-bold text-lg mb-4">
                  <div className="p-2 bg-gradient-to-r from-slate-400 to-slate-500 rounded-lg shadow-md">
                    <div className="text-white font-black text-sm">üí∞</div>
                  </div>
                  <span>Otras opciones disponibles:</span>
                </div>

                <div className="grid gap-4">
                  {/* USDT - Enhanced */}
                  <div className="group relative bg-gradient-to-r from-green-50 to-emerald-50 backdrop-blur-sm p-5 rounded-2xl border-2 border-green-200/70 hover:border-green-300/80 hover:shadow-xl transition-all duration-300 hover:scale-[1.01]">
                    <div className="absolute inset-0 bg-gradient-to-r from-green-100/30 to-emerald-100/30 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    <div className="relative flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-emerald-500 rounded-xl flex items-center justify-center text-white font-black text-lg shadow-lg ring-3 ring-green-200/50">
                          ‚ÇÆ
                        </div>
                        <div>
                          <div className="font-black text-green-800 text-lg">USDT (Tether)</div>
                          <div className="text-sm text-green-600 font-semibold bg-green-100/60 px-2 py-1 rounded-full">TRC20 Network</div>
                        </div>
                      </div>
                      <div className="text-right space-y-2">
                        <div className="bg-green-100/60 p-2 rounded-xl border border-green-200/50">
                          <div className="font-mono font-black text-green-800 text-lg">
                            {cryptoLoading || !convertedAmounts ? '...' : `${convertedAmounts?.USDT?.toFixed(2) || '...'} USDT`}
                          </div>
                          <div className="text-xs text-green-600 font-bold">
                            ‚âà ${selectedTickets.length * 250} MXN
                          </div>
                        </div>
                        <button
                          onClick={() => convertedAmounts?.USDT && navigator.clipboard.writeText(convertedAmounts.USDT.toString())}
                          className="px-4 py-2 rounded-xl text-sm font-bold transition-all duration-300 ring-2 shadow-lg active:scale-95 bg-gradient-to-r from-green-200 to-emerald-200 text-green-800 hover:from-green-300 hover:to-emerald-300 ring-green-300/50 hover:shadow-xl"
                        >
                          <Copy size={12} className="inline mr-2" />
                          Copiar USDT
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* USDC - Enhanced */}
                  <div className="group relative bg-gradient-to-r from-blue-50 to-cyan-50 backdrop-blur-sm p-5 rounded-2xl border-2 border-blue-200/70 hover:border-blue-300/80 hover:shadow-xl transition-all duration-300 hover:scale-[1.01]">
                    <div className="absolute inset-0 bg-gradient-to-r from-blue-100/30 to-cyan-100/30 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    <div className="relative flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center text-white font-black text-lg shadow-lg ring-3 ring-blue-200/50">
                          $
                        </div>
                        <div>
                          <div className="font-black text-blue-800 text-lg">USDC (USD Coin)</div>
                          <div className="text-sm text-blue-600 font-semibold bg-blue-100/60 px-2 py-1 rounded-full">ERC20 Network</div>
                        </div>
                      </div>
                      <div className="text-right space-y-2">
                        <div className="bg-blue-100/60 p-2 rounded-xl border border-blue-200/50">
                          <div className="font-mono font-black text-blue-800 text-lg">
                            {cryptoLoading || !convertedAmounts ? '...' : `${convertedAmounts?.USDC?.toFixed(2) || '...'} USDC`}
                          </div>
                          <div className="text-xs text-blue-600 font-bold">
                            ‚âà ${selectedTickets.length * 250} MXN
                          </div>
                        </div>
                        <button
                          onClick={() => convertedAmounts?.USDC && navigator.clipboard.writeText(convertedAmounts.USDC.toString())}
                          className="px-4 py-2 rounded-xl text-sm font-bold transition-all duration-300 ring-2 shadow-lg active:scale-95 bg-gradient-to-r from-blue-200 to-cyan-200 text-blue-800 hover:from-blue-300 hover:to-cyan-300 ring-blue-300/50 hover:shadow-xl"
                        >
                          <Copy size={12} className="inline mr-2" />
                          Copiar USDC
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* ETH - Enhanced */}
                  <div className="group relative bg-gradient-to-r from-purple-50 to-indigo-50 backdrop-blur-sm p-5 rounded-2xl border-2 border-purple-200/70 hover:border-purple-300/80 hover:shadow-xl transition-all duration-300 hover:scale-[1.01]">
                    <div className="absolute inset-0 bg-gradient-to-r from-purple-100/30 to-indigo-100/30 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    <div className="relative flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-indigo-500 rounded-xl flex items-center justify-center text-white font-black text-lg shadow-lg ring-3 ring-purple-200/50">
                          Œû
                        </div>
                        <div>
                          <div className="font-black text-purple-800 text-lg">Ethereum</div>
                          <div className="text-sm text-purple-600 font-semibold bg-purple-100/60 px-2 py-1 rounded-full">ERC20 Network</div>
                        </div>
                      </div>
                      <div className="text-right space-y-2">
                        <div className="bg-purple-100/60 p-2 rounded-xl border border-purple-200/50">
                          <div className="font-mono font-black text-purple-800 text-lg">
                            {cryptoLoading || !convertedAmounts ? '...' : `${convertedAmounts?.ETH?.toFixed(6) || '...'} ETH`}
                          </div>
                          <div className="text-xs text-purple-600 font-bold">
                            ‚âà ${selectedTickets.length * 250} MXN
                          </div>
                        </div>
                        <button
                          onClick={() => convertedAmounts?.ETH && navigator.clipboard.writeText(convertedAmounts.ETH.toString())}
                          className="px-4 py-2 rounded-xl text-sm font-bold transition-all duration-300 ring-2 shadow-lg active:scale-95 bg-gradient-to-r from-purple-200 to-indigo-200 text-purple-800 hover:from-purple-300 hover:to-indigo-300 ring-purple-300/50 hover:shadow-xl"
                        >
                          <Copy size={12} className="inline mr-2" />
                          Copiar ETH
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Wallet Address - Dramatically Enhanced */}
              <div className="mt-8 p-6 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 rounded-3xl border-2 border-slate-700/60 shadow-2xl ring-2 ring-slate-600/30">
                <div className="space-y-4">
                  {/* Header with Icon */}
                  <div className="flex items-center gap-3 mb-4">
                    <div className="p-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-xl shadow-lg ring-2 ring-blue-400/30">
                      <div className="text-white font-bold text-lg">üìß</div>
                    </div>
                    <div>
                      <div className="text-slate-200 font-black text-xl">Direcci√≥n de Wallet Binance</div>
                      <div className="text-slate-400 text-sm font-semibold">Env√≠a a esta direcci√≥n exacta</div>
                    </div>
                  </div>

                  {/* QR Code Placeholder */}
                  <div className="flex flex-col md:flex-row gap-6 items-center">
                    <div className="flex-shrink-0">
                      <div className="w-32 h-32 bg-gradient-to-br from-slate-700 to-slate-800 rounded-2xl flex flex-col items-center justify-center border-2 border-slate-600/50 shadow-xl">
                        <div className="text-slate-400 text-3xl mb-2">üì±</div>
                        <div className="text-slate-400 text-xs font-bold text-center px-2">QR pr√≥ximamente</div>
                      </div>
                    </div>

                    {/* Wallet Address */}
                    <div className="flex-1 space-y-4">
                      <div className="bg-gradient-to-r from-slate-800 to-slate-700 p-5 rounded-2xl border border-slate-600/50 shadow-inner">
                        <div className="text-slate-300 font-bold text-sm mb-2 uppercase tracking-wide">Email de Wallet:</div>
                        <div className="bg-slate-900/80 p-4 rounded-xl border border-slate-600/30">
                          <div className="font-mono font-bold text-white text-xl break-all leading-relaxed tracking-wide">
                            rifadesilverado2024@gmail.com
                          </div>
                        </div>
                      </div>

                      {/* Copy Button - Enhanced */}
                      <button
                        onClick={() => {
                          navigator.clipboard.writeText('rifadesilverado2024@gmail.com');
                          // Visual feedback could be added here
                        }}
                        className="w-full px-6 py-4 rounded-2xl text-base font-black transition-all duration-300 ring-3 shadow-xl active:scale-95 bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-500 text-white hover:from-blue-600 hover:via-purple-600 hover:to-indigo-600 ring-blue-400/50 hover:shadow-2xl hover:scale-105 border border-blue-400/30"
                      >
                        <Copy size={16} className="inline mr-3" />
                        Copiar Direcci√≥n de Wallet
                      </button>
                    </div>
                  </div>

                  {/* Trust Indicators */}
                  <div className="flex flex-wrap gap-2 pt-4 border-t border-slate-700/50">
                    <div className="flex items-center gap-2 bg-green-900/30 text-green-300 px-3 py-2 rounded-full text-xs font-bold border border-green-700/50">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />
                      Verificado
                    </div>
                    <div className="flex items-center gap-2 bg-blue-900/30 text-blue-300 px-3 py-2 rounded-full text-xs font-bold border border-blue-700/50">
                      <div className="w-2 h-2 bg-blue-400 rounded-full" />
                      Binance Pay
                    </div>
                    <div className="flex items-center gap-2 bg-purple-900/30 text-purple-300 px-3 py-2 rounded-full text-xs font-bold border border-purple-700/50">
                      <div className="w-2 h-2 bg-purple-400 rounded-full" />
                      Procesamiento R√°pido
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Regular Payment Method Details */}
          {method.id !== 'binance' && method.accountDetails && (
            <div className="space-y-3">
              {method.accountDetails.split('\n').map((line: string, index: number) => (
                <div key={index} className="group relative bg-white/80 backdrop-blur-sm p-4 rounded-xl border border-slate-200/60 hover:border-slate-300/60 hover:shadow-lg transition-all duration-200">
                  <div className="absolute inset-0 bg-gradient-to-r from-white/60 to-transparent rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
                  <div className="relative flex items-center justify-between">
                    <span className="text-slate-800 text-sm flex-1 mr-3 font-mono font-medium">{line}</span>
                    <button
                      onClick={() => {
                        const textToCopy = line.split(': ')[1] || line;
                        navigator.clipboard.writeText(textToCopy);
                      }}
                      className="px-3 py-2 rounded-xl text-xs font-bold transition-all duration-200 ring-1 shadow-sm active:scale-95 bg-gradient-to-r from-slate-100 to-slate-200 text-slate-700 hover:from-slate-200 hover:to-slate-300 ring-slate-200/50 hover:shadow-md"
                    >
                      <Copy size={12} className="inline mr-1.5" />
                      Copiar
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
          
          {/* Enhanced Instructions Section */}
          {method.id === 'binance' ? (
            <div className="mt-6 space-y-4">
              {/* Main Instruction Card */}
              <div className="relative bg-gradient-to-br from-amber-50 via-orange-50 to-red-50 p-6 rounded-3xl border-2 border-amber-200/80 shadow-xl ring-2 ring-amber-100/50">
                <div className="absolute inset-0 bg-gradient-to-br from-amber-100/30 via-orange-100/30 to-red-100/30 rounded-3xl" />
                <div className="relative space-y-4">
                  {/* Header with Strong Icon */}
                  <div className="flex items-center gap-4 mb-3">
                    <div className="p-3 bg-gradient-to-r from-amber-500 via-orange-500 to-red-500 rounded-2xl shadow-xl ring-2 ring-amber-300/50">
                      <FileText size={20} className="text-white" />
                    </div>
                    <div>
                      <div className="text-amber-900 font-black text-xl">Instrucciones de Pago</div>
                      <div className="text-amber-700 font-bold text-sm">Sigue estos pasos exactamente</div>
                    </div>
                  </div>

                  {/* Step-by-step Instructions */}
                  <div className="space-y-3">
                    <div className="flex items-start gap-3 p-3 bg-white/60 rounded-xl border border-amber-200/50">
                      <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-amber-500 to-orange-500 rounded-full flex items-center justify-center text-white font-black text-sm shadow-lg">
                        1
                      </div>
                      <div className="text-amber-900 font-bold text-base leading-relaxed">
                        Copia el <span className="bg-amber-200/60 px-2 py-1 rounded-lg font-black">monto EXACTO</span> de tu criptomoneda preferida
                      </div>
                    </div>

                    <div className="flex items-start gap-3 p-3 bg-white/60 rounded-xl border border-amber-200/50">
                      <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center text-white font-black text-sm shadow-lg">
                        2
                      </div>
                      <div className="text-amber-900 font-bold text-base leading-relaxed">
                        Env√≠a a la direcci√≥n: <span className="bg-slate-800 text-white px-2 py-1 rounded-lg font-mono text-sm">rifadesilverado2024@gmail.com</span>
                      </div>
                    </div>

                    <div className="flex items-start gap-3 p-3 bg-white/60 rounded-xl border border-amber-200/50">
                      <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-r from-red-500 to-pink-500 rounded-full flex items-center justify-center text-white font-black text-sm shadow-lg">
                        3
                      </div>
                      <div className="text-amber-900 font-bold text-base leading-relaxed">
                        Sube el <span className="bg-green-200/60 px-2 py-1 rounded-lg font-black">comprobante de pago</span> en el siguiente paso
                      </div>
                    </div>
                  </div>

                  {/* Important Note */}
                  <div className="mt-4 p-4 bg-gradient-to-r from-red-100 to-pink-100 rounded-2xl border-2 border-red-200/70 shadow-inner">
                    <div className="flex items-center gap-3">
                      <div className="text-red-600 text-2xl">‚ö†Ô∏è</div>
                      <div>
                        <div className="text-red-900 font-black text-sm">IMPORTANTE</div>
                        <div className="text-red-800 font-bold text-sm">El monto debe ser exacto para procesar tu compra correctamente</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className="relative bg-gradient-to-r from-blue-50 to-blue-100/80 backdrop-blur-sm p-4 rounded-2xl border border-blue-200/60 ring-1 ring-blue-200/30">
              <div className="absolute inset-0 bg-gradient-to-r from-white/30 to-transparent rounded-2xl" />
              <p className="relative text-blue-800 text-sm font-medium flex items-start gap-3">
                <div className="p-1.5 bg-blue-500 rounded-lg shadow-sm">
                  <FileText size={12} className="text-white" />
                </div>
                <span className="leading-relaxed">
                  Realiza tu transferencia y sube el comprobante en el siguiente paso
                </span>
              </p>
            </div>
          )}
        </div>
      </div>
    )}
  </div>
);

interface CustomerDataStepProps {
  customerData: CustomerData;
  onDataChange: (data: React.SetStateAction<CustomerData>) => void;
  validationErrors: ValidationErrors;
  mexicanStates: string[];
}

const CustomerDataStep: React.FC<CustomerDataStepProps> = ({
  customerData,
  onDataChange,
  validationErrors,
  mexicanStates
}) => {
  const [fieldFocus, setFieldFocus] = useState<string>('');
  const [isFormValid, setIsFormValid] = useState(false);

  // Real-time form validation
  useEffect(() => {
    const requiredFields = ['name', 'phone', 'email', 'city'];
    const allFieldsFilled = requiredFields.every(field => customerData[field]?.trim());
    const noErrors = Object.keys(validationErrors).length === 0;
    setIsFormValid(allFieldsFilled && noErrors);
  }, [customerData, validationErrors]);

  // Smart phone formatting
  const formatPhoneNumber = (value: string) => {
    const cleaned = value.replace(/\D/g, '');
    if (cleaned.startsWith('52')) {
      return `+${cleaned}`;
    }
    if (cleaned.length === 10) {
      return `+52 ${cleaned}`;
    }
    return value;
  };

  return (
    <div className="space-y-6 sm:space-y-8 animate-in fade-in-50 slide-in-from-bottom-4 duration-500">
      <StepHeader
        icon={<Users size={28} />}
        title="Tus datos de contacto"
        description="Informaci√≥n necesaria para entregarte tu premio cuando ganes"
        color="orange"
      />

      {/* Progress Indicator */}
      <div className="bg-gradient-to-r from-orange-50 to-amber-50 border border-orange-200 rounded-2xl p-4">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm font-bold text-orange-800">Progreso del formulario</span>
          <span className="text-sm font-bold text-orange-600">
            {Object.values(customerData).filter(v => v?.trim()).length}/5 campos
          </span>
        </div>
        <div className="w-full bg-orange-200 rounded-full h-2">
          <motion.div
            className="bg-gradient-to-r from-orange-500 to-amber-500 h-2 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${(Object.values(customerData).filter(v => v?.trim()).length / 5) * 100}%` }}
            transition={{ duration: 0.3 }}
          />
        </div>
        {isFormValid && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex items-center gap-2 mt-2 text-emerald-700"
          >
            <CheckCircle size={16} />
            <span className="text-sm font-bold">¬°Formulario completo!</span>
          </motion.div>
        )}
      </div>

      <div className="grid grid-cols-1 gap-5 sm:gap-6">
        {/* Full Name Field - Enhanced */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
        >
          <label className="block text-sm font-bold text-slate-800 mb-3 flex items-center gap-2">
            <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
            Nombre completo *
          </label>
          <div className="relative group">
            <input
              type="text"
              value={customerData.name}
              onChange={(e) => onDataChange(prev => ({ ...prev, name: e.target.value }))}
              onFocus={() => setFieldFocus('name')}
              onBlur={() => setFieldFocus('')}
              className={cn(
                'w-full pl-5 pr-12 py-4 rounded-2xl border-2 text-sm transition-all duration-300',
                'bg-gradient-to-r from-white to-slate-50/50 backdrop-blur-sm placeholder:text-slate-400 text-slate-900',
                'focus:outline-none focus:ring-4 hover:shadow-lg touch-manipulation',
                validationErrors.name
                  ? 'border-red-300 focus:ring-red-200/50 focus:border-red-500 shadow-red-100'
                  : 'border-slate-200/60 focus:ring-orange-200/50 focus:border-orange-500 hover:border-slate-300/60'
              )}
              placeholder="Ejemplo: Juan P√©rez Garc√≠a"
              autoComplete="name"
            />
            {customerData.name && !validationErrors.name && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="absolute right-4 top-1/2 -translate-y-1/2 z-10"
              >
                <CheckCircle size={18} className="text-emerald-500" />
              </motion.div>
            )}
          </div>
          {fieldFocus === 'name' && !customerData.name && (
            <motion.p
              initial={{ opacity: 0, y: -5 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-slate-600 text-xs mt-2 flex items-center gap-2"
            >
              <span>üí° Ingresa tu nombre completo como aparece en tu identificaci√≥n</span>
            </motion.p>
          )}
          {validationErrors.name && (
            <motion.p
              initial={{ opacity: 0, y: -5 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-red-600 text-xs mt-2 flex items-center gap-2 font-medium"
            >
              <AlertCircle size={14} />
              {validationErrors.name}
            </motion.p>
          )}
        </motion.div>

        {/* Phone Field - Enhanced with formatting */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <label className="block text-sm font-bold text-slate-800 mb-3 flex items-center gap-2">
            <Phone size={14} className="text-emerald-500" />
            Tel√©fono WhatsApp *
          </label>
          <div className="relative group">
            <input
              type="tel"
              value={customerData.phone}
              onChange={(e) => {
                const formatted = formatPhoneNumber(e.target.value);
                onDataChange(prev => ({ ...prev, phone: formatted }));
              }}
              onFocus={() => setFieldFocus('phone')}
              onBlur={() => setFieldFocus('')}
              className={cn(
                'w-full px-5 py-4 rounded-2xl border-2 text-sm transition-all duration-300',
                'bg-gradient-to-r from-white to-slate-50/50 backdrop-blur-sm placeholder:text-slate-400 text-slate-900',
                'focus:outline-none focus:ring-4 hover:shadow-lg touch-manipulation',
                validationErrors.phone
                  ? 'border-red-300 focus:ring-red-200/50 focus:border-red-500 shadow-red-100'
                  : 'border-slate-200/60 focus:ring-emerald-200/50 focus:border-emerald-500 hover:border-slate-300/60'
              )}
              placeholder="+52 55 1234 5678"
              autoComplete="tel"
            />
            {customerData.phone && !validationErrors.phone && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="absolute right-4 top-1/2 -translate-y-1/2 z-10"
              >
                <CheckCircle size={18} className="text-emerald-500" />
              </motion.div>
            )}
          </div>
          {fieldFocus === 'phone' && !customerData.phone && (
            <motion.p
              initial={{ opacity: 0, y: -5 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-slate-600 text-xs mt-2 flex items-center gap-2"
            >
              <span>üì± N√∫mero con WhatsApp para confirmaciones instant√°neas</span>
            </motion.p>
          )}
          {validationErrors.phone && (
            <motion.p
              initial={{ opacity: 0, y: -5 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-red-600 text-xs mt-2 flex items-center gap-2 font-medium"
            >
              <AlertCircle size={14} />
              {validationErrors.phone}
            </motion.p>
          )}
        </motion.div>

        {/* Email and City - Side by side on larger screens */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Email Field */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            <label className="block text-sm font-bold text-slate-800 mb-3 flex items-center gap-2">
              <Mail size={14} className="text-blue-500" />
              Email *
            </label>
            <div className="relative group">
              <input
                type="email"
                value={customerData.email}
                onChange={(e) => onDataChange(prev => ({ ...prev, email: e.target.value }))}
                onFocus={() => setFieldFocus('email')}
                onBlur={() => setFieldFocus('')}
                className={cn(
                  'w-full px-5 py-4 rounded-2xl border-2 text-sm transition-all duration-300',
                  'bg-gradient-to-r from-white to-slate-50/50 backdrop-blur-sm placeholder:text-slate-400 text-slate-900',
                  'focus:outline-none focus:ring-4 hover:shadow-lg touch-manipulation',
                  validationErrors.email
                    ? 'border-red-300 focus:ring-red-200/50 focus:border-red-500 shadow-red-100'
                    : 'border-slate-200/60 focus:ring-blue-200/50 focus:border-blue-500 hover:border-slate-300/60'
                )}
                placeholder="tu@email.com"
                autoComplete="email"
              />
              {customerData.email && !validationErrors.email && (
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="absolute right-4 top-1/2 -translate-y-1/2 z-10"
                >
                  <CheckCircle size={18} className="text-emerald-500" />
                </motion.div>
              )}
            </div>
            {fieldFocus === 'email' && !customerData.email && (
              <motion.p
                initial={{ opacity: 0, y: -5 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-slate-600 text-xs mt-2 flex items-center gap-2"
              >
                <span>üìß Para enviarte informaci√≥n importante del sorteo</span>
              </motion.p>
            )}
            {validationErrors.email && (
              <motion.p
                initial={{ opacity: 0, y: -5 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-red-600 text-xs mt-2 flex items-center gap-2 font-medium"
              >
                <AlertCircle size={14} />
                {validationErrors.email}
              </motion.p>
            )}
          </motion.div>

          {/* City Field */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            <label className="block text-sm font-bold text-slate-800 mb-3 flex items-center gap-2">
              <MapPin size={14} className="text-purple-500" />
              Ciudad *
            </label>
            <div className="relative group">
              <input
                type="text"
                value={customerData.city}
                onChange={(e) => onDataChange(prev => ({ ...prev, city: e.target.value }))}
                onFocus={() => setFieldFocus('city')}
                onBlur={() => setFieldFocus('')}
                className={cn(
                  'w-full px-5 py-4 rounded-2xl border-2 text-sm transition-all duration-300',
                  'bg-gradient-to-r from-white to-slate-50/50 backdrop-blur-sm placeholder:text-slate-400 text-slate-900',
                  'focus:outline-none focus:ring-4 hover:shadow-lg touch-manipulation',
                  validationErrors.city
                    ? 'border-red-300 focus:ring-red-200/50 focus:border-red-500 shadow-red-100'
                    : 'border-slate-200/60 focus:ring-purple-200/50 focus:border-purple-500 hover:border-slate-300/60'
                )}
                placeholder="Ejemplo: Ciudad de M√©xico"
                autoComplete="address-level2"
              />
              {customerData.city && !validationErrors.city && (
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="absolute right-4 top-1/2 -translate-y-1/2 z-10"
                >
                  <CheckCircle size={18} className="text-emerald-500" />
                </motion.div>
              )}
            </div>
            {fieldFocus === 'city' && !customerData.city && (
              <motion.p
                initial={{ opacity: 0, y: -5 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-slate-600 text-xs mt-2 flex items-center gap-2"
              >
                <span>üèôÔ∏è Ciudad donde realizaremos la entrega del premio</span>
              </motion.p>
            )}
            {validationErrors.city && (
              <motion.p
                initial={{ opacity: 0, y: -5 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-red-600 text-xs mt-2 flex items-center gap-2 font-medium"
              >
                <AlertCircle size={14} />
                {validationErrors.city}
              </motion.p>
            )}
          </motion.div>
        </div>

        {/* State Field */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
        >
          <label className="block text-sm font-bold text-slate-800 mb-3 flex items-center gap-2">
            <Building2 size={14} className="text-indigo-500" />
            Estado
          </label>
          <div className="relative group">
            <select
              value={customerData.state}
              onChange={(e) => onDataChange(prev => ({ ...prev, state: e.target.value }))}
              className="w-full px-5 py-4 rounded-2xl border-2 border-slate-200/60 text-sm bg-gradient-to-r from-white to-slate-50/50 backdrop-blur-sm text-slate-900 focus:outline-none focus:ring-4 focus:ring-indigo-200/50 focus:border-indigo-500 hover:border-slate-300/60 hover:shadow-lg transition-all duration-300 appearance-none cursor-pointer touch-manipulation"
            >
              {mexicanStates.map(state => (
                <option key={state} value={state}>{state}</option>
              ))}
            </select>
            <div className="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
              <motion.svg
                className="w-5 h-5 text-slate-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                animate={{ rotate: fieldFocus === 'state' ? 180 : 0 }}
                transition={{ duration: 0.2 }}
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </motion.svg>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Security Notice */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.6 }}
        className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-2xl p-4"
      >
        <div className="flex items-center gap-3 text-blue-800">
          <div className="p-2 bg-blue-500 rounded-xl">
            <CheckCircle size={16} className="text-white" />
          </div>
          <div>
            <h4 className="font-bold text-sm">Tus datos est√°n seguros</h4>
            <p className="text-xs text-blue-600 mt-1">
              Solo usamos tu informaci√≥n para contactarte y entregar tu premio. No compartimos datos con terceros.
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

interface PaymentProofStepProps {
  selectedPaymentMethod: string;
  mainPaymentMethods: any[];
  customerData: CustomerData;
  selectedTickets: number[];
  totalPrice: number;
  paymentScreenshot: File | null;
  previewUrl: string;
  onFileChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  onRemoveFile: () => void;
  validationError?: string;
  copiedField: string;
  onCopyToClipboard: (text: string, field: string) => void;
}

const PaymentProofStep: React.FC<PaymentProofStepProps> = ({
  selectedPaymentMethod,
  mainPaymentMethods,
  customerData,
  selectedTickets,
  totalPrice,
  paymentScreenshot,
  previewUrl,
  onFileChange,
  onRemoveFile,
  validationError,
  copiedField,
  onCopyToClipboard
}) => (
  <div className="space-y-8 animate-in fade-in-50 slide-in-from-bottom-4 duration-500">
    <StepHeader
      icon={<Camera size={28} />}
      title="Sube tu comprobante"
      description="Captura de pantalla de tu transferencia"
      color="pink"
    />

    {/* File Upload Area */}
    <div className="group relative border-2 border-dashed border-slate-300/60 rounded-3xl p-6 sm:p-8 bg-gradient-to-br from-slate-50 to-slate-100/50 hover:from-slate-100 hover:to-slate-200/50 backdrop-blur-sm transition-all duration-500 hover:border-slate-400/60 hover:shadow-xl">
      <div className="absolute inset-0 bg-gradient-to-br from-white/40 to-transparent rounded-3xl opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
      <div className="relative text-center">
        {!previewUrl ? (
          <>
            <div className="relative w-16 h-16 sm:w-20 sm:h-20 mx-auto mb-6">
              <div className="absolute inset-0 bg-gradient-to-br from-slate-200 to-slate-300 rounded-2xl animate-pulse" />
              <div className="relative w-full h-full bg-gradient-to-br from-slate-300 to-slate-400 rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                <Upload size={32} className="text-white drop-shadow-sm" />
              </div>
            </div>
            <div className="space-y-4">
              <h4 className="text-lg sm:text-xl font-bold text-slate-900">
                Selecciona tu comprobante
              </h4>
              <p className="text-slate-600 font-medium">
                JPG, PNG o cualquier imagen (m√°x. 10MB)
              </p>
              
              <input
                type="file"
                id="screenshot-upload"
                accept="image/*"
                onChange={onFileChange}
                className="hidden"
              />
              
              <label
                htmlFor="screenshot-upload"
                className="cursor-pointer inline-flex items-center gap-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-3 rounded-2xl font-bold transition-all duration-300 hover:shadow-xl hover:shadow-blue-500/25 hover:scale-105 active:scale-95 ring-2 ring-blue-500/20"
              >
                <Upload size={16} />
                Seleccionar archivo
              </label>
            </div>
          </>
        ) : (
          <div className="space-y-6 animate-in fade-in-50 zoom-in-95 duration-300">
            <div className="flex items-center justify-between">
              <span className="text-emerald-700 font-bold flex items-center gap-3 text-lg">
                <div className="p-2 bg-emerald-500 rounded-xl shadow-lg shadow-emerald-500/25">
                  <CheckCircle size={18} className="text-white" />
                </div>
                Comprobante cargado
              </span>
              <button
                onClick={onRemoveFile}
                className="text-slate-400 hover:text-slate-600 p-2 rounded-xl hover:bg-slate-200/80 transition-all duration-200 hover:scale-110 active:scale-95"
              >
                <X size={18} />
              </button>
            </div>
            <div className="relative">
              <img
                src={previewUrl}
                alt="Comprobante de pago"
                className="w-full max-w-sm mx-auto rounded-2xl shadow-xl border-2 border-slate-200/60 max-h-48 object-cover ring-1 ring-slate-200/30"
              />
              <div className="absolute inset-0 rounded-2xl ring-1 ring-slate-300/30 pointer-events-none" />
            </div>
            <p className="text-sm text-slate-700 font-medium truncate bg-white/80 backdrop-blur-sm px-4 py-2 rounded-xl border border-slate-200/60 inline-block">
              {paymentScreenshot?.name}
            </p>
          </div>
        )}
      </div>

      {validationError && (
        <div className="relative mt-6 bg-gradient-to-r from-red-50 to-red-100/80 backdrop-blur-sm border border-red-200/60 rounded-2xl p-4 text-center ring-1 ring-red-200/30 animate-in fade-in-50 slide-in-from-top-2 duration-300">
          <div className="absolute inset-0 bg-gradient-to-r from-white/30 to-transparent rounded-2xl" />
          <div className="relative text-red-800 text-sm font-bold flex items-center justify-center gap-2">
            <div className="w-5 h-5 bg-red-500 rounded-full flex items-center justify-center">
              <X size={12} className="text-white" />
            </div>
            {validationError}
          </div>
        </div>
      )}
    </div>

    {/* Purchase Summary */}
    <div className="relative bg-gradient-to-br from-slate-50 to-slate-100/50 backdrop-blur-sm rounded-2xl p-6 ring-1 ring-slate-200/50 shadow-lg">
      <div className="absolute inset-0 bg-gradient-to-br from-white/40 to-transparent rounded-2xl" />
      <div className="relative">
        <h4 className="font-bold text-slate-900 mb-6 flex items-center gap-3 text-lg">
          <div className="p-2 bg-gradient-to-br from-mexican-green to-cactus-green rounded-xl shadow-lg shadow-mexican-green/25">
            <CheckCircle size={18} className="text-white" />
          </div>
          <span className="bg-gradient-to-r from-slate-900 to-slate-700 bg-clip-text text-transparent">
            Resumen de tu compra
          </span>
        </h4>
        
        <div className="grid grid-cols-2 gap-4 mb-6">
          <div className="group relative bg-white/80 backdrop-blur-sm p-5 rounded-2xl text-center ring-1 ring-slate-200/50 hover:ring-slate-300/60 hover:shadow-lg transition-all duration-300">
            <div className="absolute inset-0 bg-gradient-to-br from-white/60 to-transparent rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            <div className="relative">
              <div className="text-sm text-slate-600 font-semibold mb-2">N√∫meros</div>
              <div className="text-2xl font-black bg-gradient-to-br from-slate-800 to-slate-600 bg-clip-text text-transparent">
                {selectedTickets.length}
              </div>
            </div>
          </div>
          <div className="group relative bg-white/80 backdrop-blur-sm p-5 rounded-2xl text-center ring-1 ring-emerald-200/50 hover:ring-emerald-300/60 hover:shadow-lg transition-all duration-300">
            <div className="absolute inset-0 bg-gradient-to-br from-white/60 to-transparent rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            <div className="relative">
              <div className="text-sm text-emerald-700 font-semibold mb-2">Total</div>
              <div className="text-2xl font-black bg-gradient-to-br from-mexican-red to-sunset-orange bg-clip-text text-transparent">
                {formatPrice(totalPrice)}
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white/80 backdrop-blur-sm p-5 rounded-2xl space-y-4 text-sm ring-1 ring-slate-200/50">
          <div className="flex justify-between items-center">
            <span className="text-slate-600 font-medium flex items-center gap-2">
              <CreditCard size={14} className="text-blue-500" />
              M√©todo:
            </span>
            <span className="font-bold text-slate-900 truncate ml-2">
              {mainPaymentMethods.find(m => m.id === selectedPaymentMethod)?.name}
            </span>
          </div>
          <div className="flex justify-between items-center">
            <span className="text-slate-600 font-medium flex items-center gap-2">
              <Users size={14} className="text-violet-500" />
              Comprador:
            </span>
            <span className="font-bold text-slate-900 truncate ml-2">{customerData.name}</span>
          </div>
        </div>
      </div>
    </div>

    {/* Payment Account Information */}
    {(() => {
      const selectedMethod = mainPaymentMethods.find(m => m.id === selectedPaymentMethod);
      if (!selectedMethod) return null;

      return (
        <div className="relative bg-gradient-to-br from-emerald-50 to-emerald-100/80 backdrop-blur-sm border border-emerald-200/60 rounded-2xl p-6 ring-1 ring-emerald-200/30 shadow-lg">
          <div className="absolute inset-0 bg-gradient-to-br from-white/40 to-transparent rounded-2xl" />
          <div className="relative">
            <h4 className="font-bold text-emerald-900 mb-6 flex items-center gap-3 text-lg">
              <div className="p-2 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl shadow-lg shadow-emerald-500/25">
                <CreditCard size={18} className="text-white" />
              </div>
              <span className="bg-gradient-to-r from-emerald-900 to-emerald-700 bg-clip-text text-transparent">
                Datos para tu transferencia - {selectedMethod.name}
              </span>
            </h4>

            <div className="bg-white/90 backdrop-blur-sm p-5 rounded-2xl space-y-4 ring-1 ring-emerald-200/50 shadow-md">
              {selectedMethod.id === 'binance' ? (
                <div className="space-y-4">
                  <div className="flex justify-between items-center group">
                    <span className="text-emerald-700 font-semibold flex items-center gap-2">
                      <span className="w-2 h-2 bg-emerald-500 rounded-full"></span>
                      Email Binance Pay:
                    </span>
                    <div className="flex items-center gap-2">
                      <span className="font-mono font-bold text-slate-900 bg-slate-100 px-3 py-1 rounded-lg">
                        {selectedMethod.account}
                      </span>
                      <button
                        onClick={() => onCopyToClipboard(selectedMethod.account, 'binance-email')}
                        className="p-2 text-emerald-600 hover:text-emerald-700 hover:bg-emerald-100 rounded-xl transition-all duration-200 hover:scale-110 active:scale-95"
                      >
                        {copiedField === 'binance-email' ? <CheckCircle size={16} /> : <Copy size={16} />}
                      </button>
                    </div>
                  </div>
                  <div className="bg-emerald-50 p-4 rounded-xl border border-emerald-200">
                    <p className="text-sm text-emerald-800 font-medium">
                      üí° <strong>Importante:</strong> Transfiere exactamente <strong className="text-emerald-900">{formatPrice(totalPrice)}</strong>
                      al email de Binance Pay mostrado arriba.
                    </p>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  {selectedMethod.accountDetails?.split('\n').map((line: string, index: number) => {
                    const [label, ...valueParts] = line.split(':');
                    const value = valueParts.join(':').trim();

                    if (!value) return null;

                    return (
                      <div key={index} className="flex justify-between items-center group">
                        <span className="text-emerald-700 font-semibold flex items-center gap-2">
                          <span className="w-2 h-2 bg-emerald-500 rounded-full"></span>
                          {label.trim()}:
                        </span>
                        <div className="flex items-center gap-2">
                          <span className="font-mono font-bold text-slate-900 bg-slate-100 px-3 py-1 rounded-lg">
                            {value}
                          </span>
                          <button
                            onClick={() => onCopyToClipboard(value, `${selectedMethod.id}-${index}`)}
                            className="p-2 text-emerald-600 hover:text-emerald-700 hover:bg-emerald-100 rounded-xl transition-all duration-200 hover:scale-110 active:scale-95"
                          >
                            {copiedField === `${selectedMethod.id}-${index}` ? <CheckCircle size={16} /> : <Copy size={16} />}
                          </button>
                        </div>
                      </div>
                    );
                  })}
                  <div className="bg-emerald-50 p-4 rounded-xl border border-emerald-200">
                    <p className="text-sm text-emerald-800 font-medium">
                      üí° <strong>Importante:</strong> Transfiere exactamente <strong className="text-emerald-900">{formatPrice(totalPrice)}</strong>
                      a la cuenta mostrada arriba.
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    })()}

    {/* Final Instructions */}
    <div className="relative bg-gradient-to-r from-blue-50 to-blue-100/80 backdrop-blur-sm border border-blue-200/60 rounded-2xl p-6 ring-1 ring-blue-200/30 shadow-lg">
      <div className="absolute inset-0 bg-gradient-to-r from-white/30 to-transparent rounded-2xl" />
      <div className="relative flex gap-4">
        <div className="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl shadow-lg shadow-blue-500/25 flex-shrink-0">
          <FileText size={20} className="text-white" />
        </div>
        <div className="text-blue-800 space-y-2">
          <p className="font-bold text-lg">¬øQu√© sigue?</p>
          <p className="text-sm font-medium leading-relaxed">
            Recibir√°s confirmaci√≥n por email. Revisaremos tu comprobante en m√°ximo 24 horas
            y te contactaremos para confirmar tus n√∫meros.
          </p>
        </div>
      </div>
    </div>
  </div>
);

export default PurchaseWizard;